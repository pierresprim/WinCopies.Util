<!-- Source: https://dzone.com/articles/how-get-eventargs ; Author of original code: Marlon Grech

   This is free and unencumbered software released into the public domain.
  
   Anyone is free to copy, modify, publish, use, compile, sell, or
   distribute this software, either in source code form or as a compiled
   binary, for any purpose, commercial or non-commercial, and by any
   means.
  
   In jurisdictions that recognize copyright laws, the author or authors
   of this software dedicate any and all copyright interest in the
   software to the public domain. We make this dedication for the benefit
   of the public at large and to the detriment of our heirs and
   successors. We intend this dedication to be an overt act of
   relinquishment in perpetuity of all present and future rights to this
   software under copyright law.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
   IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   OTHER DEALINGS IN THE SOFTWARE.
  
   For more information, please refer to<http://unlicense.org> -->

<Window x:Class="AttachedCommandBehaviorDemo.DemoView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:WinCopies.Commands;assembly=WinCopies.Util.Desktop"
    xmlns:coll="clr-namespace:System.Collections;assembly=mscorlib"
    Title="Attached Command Behaviors aka ACB : : C# Disciple" Height="650" Width="600">
    <Grid Margin="10">

        <Grid.RowDefinitions>
            <RowDefinition Height="25"/>
            <RowDefinition Height="175"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBlock Text="Attached Command Behaviors aka ACB" FontWeight="Bold" FontSize="16"/>

        <Border CornerRadius="5" Margin="10" BorderBrush="Silver" BorderThickness="1" Grid.Row="1" TextElement.FontSize="14">
            <StackPanel>
                <TextBlock Text="List of the last commands executed: " FontWeight="Bold"/>
                <ListBox ItemsSource="{Binding Messages}" Height="110" />
                <Button Content="Clear" Command="{Binding ClearMessagesCommand}"/>
            </StackPanel>
        </Border>

        <StackPanel Grid.Row="2" >

            <WrapPanel Margin="0,10,0,20">
                <TextBlock FontSize="14" Text="Border hooked to MouseDown event" Width="410"/>
                <Border Background="Yellow" Width="350" Margin="0,0,10,0" Height="35" CornerRadius="2"
                        local:CommandBehavior.Event="MouseDown" 
                        local:CommandBehavior.Command="{Binding SomeCommand}"
                        local:CommandBehavior.CommandParameter="MouseDown"
                        >
                    <TextBlock Text="MouseDown on this border to execute the command"/>
                </Border>
            </WrapPanel>

            <WrapPanel Margin="0,0,0,20">
                <TextBlock FontSize="14" Text="Border hooked to the event selected in the ComboBox" Width="410"/>
                <Border Background="YellowGreen" Width="350" Margin="0,0,10,0" Height="35" CornerRadius="2"
                        local:CommandBehavior.Event="{Binding ElementName=events1, Path=SelectedItem}" 
                        local:CommandBehavior.Command="{Binding SomeCommand}"
                        local:CommandBehavior.CommandParameter="{Binding ElementName=events1, Path=SelectedItem}"
                        >
                    <WrapPanel>
                        <TextBlock>
                            <Run Text="{Binding ElementName=events1, Path=SelectedItem}" />
                            <Run Text=" on this border to execute the command" />
                        </TextBlock>
                    </WrapPanel>
                </Border>
                <ComboBox ItemsSource="{Binding Events}" MinWidth="200" SelectedIndex="1" x:Name="events1"/>
            </WrapPanel>

            <WrapPanel Margin="0,0,0,20">
                <TextBlock FontSize="14" Text="Border hooked to an Action instead of a Command" Width="410" />
                <Border Background="DarkSalmon" Width="350" Margin="0,0,10,0" Height="35" CornerRadius="2" 
                        local:CommandBehavior.Event="MouseDown"  
                        local:CommandBehavior.Action="{Binding DoSomething}"
                        local:CommandBehavior.CommandParameter="from the DarkSalmon Border :P"/>
            </WrapPanel>

            <WrapPanel Margin="0,10,0,20">

                <TextBlock FontSize="14" Text="Border hooked to MouseDown event" Width="410"/>
                <Border Background="Yellow" Width="350" Margin="0,0,10,0" Height="35" CornerRadius="2" x:Name="test">
                    <local:CommandBehaviorCollection.Behaviors>
                        <local:BehaviorBinding Event="MouseLeftButtonDown" Action="{Binding DoSomething}" CommandParameter="An Action on MouseLeftButtonDown"/>
                        <local:BehaviorBinding Event="MouseRightButtonDown" Command="{Binding SomeCommand}" CommandParameter="A Command on MouseRightButtonDown"/>
                    </local:CommandBehaviorCollection.Behaviors>
                    <TextBlock Text="MouseDown on this border to execute the command"/>
                </Border>
            </WrapPanel>

            <WrapPanel Margin="0,10,0,20">

                <TextBlock FontSize="14" Text="Border hooked to MouseDown event" Width="410"/>
                <Border Background="Yellow" Width="350" Margin="0,0,10,0" Height="35" CornerRadius="2">
                    <Border.Style>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="local:CommandBehaviorCollection.StyleBehaviors">
                                <Setter.Value>
                                    <local:BehaviorBindingCollection>
                                        <local:BehaviorBinding Event="MouseLeftButtonDown" Action="{Binding DoSomething}" CommandParameter="An Action on MouseLeftButtonDown"/>
                                        <local:BehaviorBinding Event="MouseRightButtonDown" Command="{Binding SomeCommand}" CommandParameter="A Command on MouseRightButtonDown"/>
                                    </local:BehaviorBindingCollection>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Border.Style>
                    <TextBlock Text="MouseDown on this border to execute the command"/>
                </Border>
            </WrapPanel>
        </StackPanel>
    </Grid>
</Window>
