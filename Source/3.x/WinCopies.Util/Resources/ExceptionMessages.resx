<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentMustBeAnInstanceOf" xml:space="preserve">
    <value>{0} must be an instance of {1}.</value>
  </data>
  <data name="ArgumentMustBeFromEnumAndNotValue" xml:space="preserve">
    <value>{0} must be a value of the {1} enum and can't be the {2} value.</value>
  </data>
  <data name="ArrayHasNonZeroLowerBound" xml:space="preserve">
    <value>The given array has a non-zero lower bound.</value>
  </data>
  <data name="ArrayHasNotEnoughSpace" xml:space="preserve">
    <value>The given array has not enough space.</value>
  </data>
  <data name="ArrayWithMoreThanOneDimension" xml:space="preserve">
    <value>Arrays must have only one dimension.</value>
  </data>
  <data name="CollectionChangedDuringEnumeration" xml:space="preserve">
    <value>The collection has changed during enumeration.</value>
  </data>
  <data name="CurrentObjectIsDisposing" xml:space="preserve">
    <value>The current object or value is disposing.</value>
  </data>
  <data name="DeclaringTypesNotCorrespond" xml:space="preserve">
    <value>The declaring types of '{0}' and '{1}' do not correspond. The declaring types of '{0}' and '{1}' must correspond for read-only properties when an integrity check is performed.</value>
  </data>
  <data name="EnumeratorIsNotStartedOrDisposed" xml:space="preserve">
    <value>The enumeration has not started or the enumerator is disposed.</value>
  </data>
  <data name="FieldOrPropertyNotFound" xml:space="preserve">
    <value>'{0}' couldn't be found in '{1}'.</value>
  </data>
  <data name="GivenTypeIsNotSupported" xml:space="preserve">
    <value>The given type is not supported.</value>
  </data>
  <data name="InvalidArgument" xml:space="preserve">
    <value>The argument passed to parameter {0} is not supported.</value>
  </data>
  <data name="InvalidEnumValue" xml:space="preserve">
    <value>The enum value is not in the enum values range.</value>
  </data>
  <data name="MoreThanOneOccurencesWereFound" xml:space="preserve">
    <value>More than one occurences were found.</value>
  </data>
  <data name="MultidimensionalArraysNotSupported" xml:space="preserve">
    <value>Multidimensional arrays are not supported.</value>
  </data>
  <data name="NonFlagsEnumException" xml:space="preserve">
    <value>The given enum does not have the FlagsAttribute attribute.</value>
  </data>
  <data name="NonFlagsEnumTypeException" xml:space="preserve">
    <value>The given enum type does not have the FlagsAttribute attribute.</value>
  </data>
  <data name="NoValidEnumValue" xml:space="preserve">
    <value>'{0}' must be one of the {1} enum values.</value>
  </data>
  <data name="OneOrMoreKeyIsNull" xml:space="preserve">
    <value>One or more key is null.</value>
  </data>
  <data name="OneOrMoreSameKey" xml:space="preserve">
    <value>'{0}' has one or more same key.</value>
  </data>
  <data name="ParameterIsNotAnExpectedValue" xml:space="preserve">
    <value>'{0}' is not an expected value.</value>
  </data>
  <data name="ReadOnlyCollection" xml:space="preserve">
    <value>This collection is read-only.</value>
  </data>
  <data name="SequenceContainsNoItemOrNoItemMatchedGivenPredicate" xml:space="preserve">
    <value>The sequence contains no item or no item matched the given predicate.</value>
  </data>
  <data name="StringIsNullEmptyOrWhiteSpace" xml:space="preserve">
    <value>The given value is null, empty or white space. The given value is: '{0}'.</value>
  </data>
  <data name="StringParameterEmptyOrWhiteSpaces" xml:space="preserve">
    <value>'{0}' is empty or white space.</value>
  </data>
</root>