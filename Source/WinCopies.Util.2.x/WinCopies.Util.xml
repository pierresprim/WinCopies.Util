<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinCopies.Util</name>
    </assembly>
    <members>
        <member name="T:WinCopies.Util.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ArrayHasNonZeroLowerBound">
            <summary>
              Looks up a localized string similar to The given array has a non-zero lower bound..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ArrayHasNotEnoughSpace">
            <summary>
              Looks up a localized string similar to The given array has not enough space..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ArrayWithMoreThanOneDimension">
            <summary>
              Looks up a localized string similar to Arrays must have only one dimension..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.CurrentObjectIsDisposing">
            <summary>
              Looks up a localized string similar to The current object or value is disposing..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.DeclaringTypesNotCorrespond">
            <summary>
              Looks up a localized string similar to The declaring types of &apos;{0}&apos; and &apos;{1}&apos; do not correspond. The declaring types of &apos;{0}&apos; and &apos;{1}&apos; must correspond for read-only properties when an integrity check is performed..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.EnumeratorIsNotStartedOrDisposed">
            <summary>
              Looks up a localized string similar to The enumeration is not started or the enumerator is disposed..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.FieldOrPropertyNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; couldn&apos;t be found in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.InvalidArgument">
            <summary>
              Looks up a localized string similar to The argument passed to parameter {0} is not supported..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The enum value is not in the enum values range..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.MoreThanOneOccurencesWereFound">
            <summary>
              Looks up a localized string similar to More than one occurences were found..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.MultidimensionalArraysNotSupported">
            <summary>
              Looks up a localized string similar to Multidimensional arrays are not supported..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.NonFlagsEnumException">
            <summary>
              Looks up a localized string similar to The given enum does not have the FlagsAttribute attribute..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.NonFlagsEnumTypeException">
            <summary>
              Looks up a localized string similar to The given enum type does not have the FlagsAttribute attribute..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.NoValidEnumValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must be one of the {1} enum values..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.OneOrMoreKeyIsNull">
            <summary>
              Looks up a localized string similar to One or more key is null..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.OneOrMoreSameKey">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has one or more same key..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ParameterIsNotAnExpectedValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not an expected value..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This collection is read-only..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.StringIsNullEmptyOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The given value is null, empty or white space. The given value is: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WinCopies.Util.Resources.ExceptionMessages.StringParameterEmptyOrWhiteSpaces">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is empty or white space..
            </summary>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <remarks>This constructor will create a localized message saying that the <paramref name="argumentName"/> parameter was invalid because the value passed in was invalid, and that the value should be one of the values in the enumeration class.</remarks>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.Int64,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a custom message, the argument name, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Int64,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a custom message, the argument name, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
        </member>
        <member name="P:WinCopies.Util.InvalidEnumArgumentException.Message">
            <summary>
            Gets the error message and the parameter name, or only the error message if no parameter name is set.
            </summary>
            <returns>A text string describing the details of the exception. The value of this property takes one of two forms: Condition Value The paramName is a null reference (Nothing in Visual Basic) or of zero length. The message string passed to the constructor. The paramName is not null reference (Nothing in Visual Basic) and it has a length greater than zero. The message string appended with the name of the invalid parameter.</returns>
        </member>
        <member name="P:WinCopies.Util.InvalidEnumArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
            <returns>The parameter name.</returns>
        </member>
        <member name="P:WinCopies.Util.InvalidEnumArgumentException.InvalidValue">
            <summary>
            The value of the argument that failed.
            </summary>
        </member>
        <member name="M:WinCopies.Util.InvalidArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidArgumentException"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Util.InvalidArgumentException.#ctor(System.String@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidArgumentException"/> class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidArgumentException.#ctor(System.String@,System.Exception@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.InvalidArgumentException"/> class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.Util.InvalidArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo@,System.Runtime.Serialization.StreamingContext@)">
            <summary>
            Initializes a new instance of the System.ArgumentException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class with a specified
            error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not a <see langword="null"/> reference, the current exception is raised in a catch
            block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class with a specified
            error message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class with a specified
            error message, the parameter name, and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not a <see langword="null"/> reference, the current exception is raised in a catch
            block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.Util.TypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.TypeArgumentException"/> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:WinCopies.Util.LoopIteration">
            <summary>
            This delegate represents the action that is performed for each iteration of a loop.
            </summary>
            <param name="obj">The object or value retrieved by the current iteration.</param>
            <returns><see langword="true"/> to break the loop; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Util.LoopIteration`1">
            <summary>
            This delegate represents the action that is performed for each iteration of a loop.
            </summary>
            <typeparam name="T">The type of the object or value that is retrieved.</typeparam>
            <param name="obj">The object or value retrieved by the current iteration.</param>
            <returns><see langword="true"/> to break the loop; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Util.Extensions">
            <summary>
            Provides some static extension methods.
            </summary>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeIfNotContains(System.Collections.ICollection,System.Object[])">
            <summary>
            Tries to add multiple values to an <see cref="T:System.Collections.ICollection"/> if it does not contain them already.
            </summary>
            <param name="collection">The collection to which try to add the value</param>
            <param name="values">The values to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddIfNotContains(System.Collections.IList,System.Object@)">
            <summary>
            Tries to add a value to an <see cref="T:System.Collections.IList"/> if it does not contain it already.
            </summary>
            <param name="collection">The collection to which try to add the value</param>
            <param name="value">The value to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeIfNotContains(System.Collections.IList,System.Object[])">
            <summary>
            Tries to add multiple values to an <see cref="T:System.Collections.IList"/> if it does not contain them already.
            </summary>
            <param name="collection">The collection to which try to add the value</param>
            <param name="values">The values to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddIfNotContains``1(System.Collections.Generic.ICollection{``0},``0@)">
            <summary>
            Tries to add a value to an <see cref="T:System.Collections.Generic.ICollection`1"/> if it does not contain it already.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="collection">The collection to which try to add the value</param>
            <param name="value">The value to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Tries to add multiple values to an <see cref="T:System.Collections.Generic.ICollection`1"/> if it does not contain them already.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="collection">The collection to which try to add the value</param>
            <param name="values">The values to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.InsertIfNotContains(System.Collections.IList,System.Int32@,System.Object@)">
            <summary>
            Inserts a value at the specified index in a given collection if the value does not already exists in the collection.
            </summary>
            <param name="collection">The collection in which to add the value.</param>
            <param name="index">The index at the collection to which add the value.</param>
            <param name="value">The value to add in the collection.</param>
            <returns><see langword="true"/> if the value is added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(System.Collections.Generic.LinkedList{``0},``0[])">
            <summary>
            Add multiple values at the top of a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="values">The values to add to this <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values at the top of a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="array">The values to add to this <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(System.Collections.Generic.LinkedList{``0},``0[])">
            <summary>
            Add multiple values at the end of a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="values">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values at the end of a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="array">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,``0[])">
            <summary>
            Add multiple values before a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="values">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values before a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple values before a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple values before a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,``0[])">
            <summary>
            Add multiple values after a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="values">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values after a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple values after a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="nodes">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple values after a specified node in a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.LinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to a <see cref="T:System.Collections.Generic.LinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.RemoveRange(System.Collections.IList,System.Int32@,System.Int32@)">
            <summary>
            Removes multiple items in an <see cref="T:System.Collections.IList"/> collection, from a given start index for a given length.
            </summary>
            <param name="collection">The collection from which remove the items.</param>
            <param name="start">The start index in the collection from which delete the items.</param>
            <param name="length">The length to remove.</param>
        </member>
        <member name="M:WinCopies.Util.Extensions.Append(System.Array,System.Array[])">
            <summary>
            Appends data to the table. Arrays must have only one dimension.
            </summary>
            <param name="array">The source table.</param>
            <param name="arrays">The tables to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AppendLong(System.Array,System.Array[])">
            <summary>
            Appends data to the table using the <see cref="P:System.Array.LongLength"/> length property. Arrays must have only one dimension.
            </summary>
            <param name="array">The source table.</param>
            <param name="arrays">The tables to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Sort``1(System.Collections.ObjectModel.ObservableCollection{``0})">
            <summary>
            Sorts an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">The type of the values in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</typeparam>
            <param name="oc">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to sort.</param>
        </member>
        <member name="M:WinCopies.Util.Extensions.Sort``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IComparer{``0}@)">
            <summary>
            Sorts an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with a user-defined comparer.
            </summary>
            <typeparam name="T">The type of the values in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</typeparam>
            <param name="oc">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to sort.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> providing comparison for sorting the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue(System.Collections.IEnumerable,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue(System.Collections.IEnumerable,System.Collections.IComparer,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue(System.Collections.IEnumerable,System.Comparison{System.Object},System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue(System.Collections.IEnumerable,WinCopies.Collections.Comparison,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:WinCopies.Collections.Comparison"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue(System.Collections.IEnumerable,System.Collections.IEqualityComparer,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom equality comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Collections.IComparer,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Comparison{System.Object},System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Collections.IEqualityComparer,System.Boolean@,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom equality comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Collections.IComparer,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Comparison{System.Object},System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues(System.Collections.IEnumerable,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains(System.Collections.IEnumerable,System.Object[])">
            <summary>
            Checks whether an array contains all values of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains(System.Collections.IEnumerable,System.Collections.IComparer,System.Object[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains(System.Collections.IEnumerable,System.Comparison{System.Object},System.Object[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains(System.Collections.IEnumerable,System.Collections.IEqualityComparer,System.Object[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.IEqualityComparer"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue``1(System.Collections.Generic.IEnumerable{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneValue``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains <i>exactly</i> one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if <i>exactly</i> one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean@,``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the values</param>
            <param name="containsMoreThanOneValue"><see langword="true"/> if more than one value has been found, otherwise <see langword="false"/></param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0},``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ContainsOneOrMoreValues``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Checks whether an array contains at least one value of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Checks whether an array contains all values of a given array.
            </summary>
            <param name="array">The array to browse</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},``0[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0},``0[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},``0[])">
            <summary>
            Checks whether an array contains all values of a given array using a custom comparer.
            </summary>
            <param name="array">The array to browse</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used to compare the values</param>
            <param name="values">The values to compare</param>
            <returns><see langword="true"/> if at least one value has been found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AsObjectEnumerable(System.Collections.IEnumerable)">
            <summary>
            Yield returns each object of an <see cref="T:System.Collections.IEnumerable"/>, so the given <see cref="T:System.Collections.IEnumerable"/> will be considered as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="enumerable">An <see cref="T:System.Collections.IEnumerable"/> to consider as a <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Yield returns the same enumerable as the given <paramref name="enumerable"/>, as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable)">
            <summary>
            Returns the first item, if any, from <typeparamref name="T"/> in a given <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the item to return.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> in which to look for the first item of the given type.</param>
            <returns>The first item, if any, from <typeparamref name="T"/> in <paramref name="enumerable"/> or the default value for <typeparamref name="T"/> if none value was found.</returns>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable)"/>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)">
            <summary>
            Returns the first item, if any, from <typeparamref name="T"/> and that validates a given predicate in a given <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the item to return.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> in which to look for the first item of the given type.</param>
            <param name="predicate">The predicate to validate.</param>
            <returns>The first item, if any, from <typeparamref name="T"/> in <paramref name="enumerable"/> or the default value for <typeparamref name="T"/> if none value was found.</returns>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable)"/>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable)">
            <summary>
            Returns the last item, if any, from <typeparamref name="T"/> in a given <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the item to return.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> in which to look for the last item of the given type.</param>
            <returns>The last item, if any, from <typeparamref name="T"/> in <paramref name="enumerable"/> or the default value for <typeparamref name="T"/> if none value was found.</returns>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable)"/>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)">
            <summary>
            Returns the last item, if any, from <typeparamref name="T"/> and that validates a given predicate in a given <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the item to return.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.IEnumerable"/> in which to look for the last item of the given type.</param>
            <param name="predicate">The predicate to validate.</param>
            <returns>The last item, if any, from <typeparamref name="T"/> in <paramref name="enumerable"/> or the default value for <typeparamref name="T"/> if none value was found.</returns>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable,System.Predicate{``0}@)"/>
            <seealso cref="M:WinCopies.Util.Extensions.FirstOrDefault``1(System.Collections.IEnumerable)"/>
            <seealso cref="M:WinCopies.Util.Extensions.LastOrDefault``1(System.Collections.IEnumerable)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.Is(System.Object,System.Boolean@,System.Type[])">
            <summary>
            Checks if the current object is assignable from at least one type of a given <see cref="T:System.Type"/> array.
            </summary>
            <param name="obj">The object from which check the type</param>
            <param name="typeEquality"><see langword="true"/> to preserve type equality, regardless of the type inheritance, otherwise <see langword="false"/></param>
            <param name="types">The types to compare</param>
            <returns><see langword="true"/> if the current object is assignable from at least one of the given types, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ToList(System.Collections.IEnumerable,System.Int32@,System.Nullable{System.Int32}@)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to an <see cref="T:System.Collections.ArrayList"/> from a given index for a given length.
            </summary>
            <param name="array">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <param name="startIndex">The index from which start the conversion.</param>
            <param name="length">The length of items to copy in the out <see cref="T:System.Collections.ArrayList"/>. Leave this parameter to null if you want to copy all the source <see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>The result <see cref="T:System.Collections.ArrayList"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Nullable{System.Int32}@)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to a <see cref="T:System.Collections.Generic.List`1"/> from a given index for a given length.
            </summary>
            <param name="array">The <see cref="T:System.Collections.IEnumerable"/> to convert</param>
            <param name="startIndex">The index from which start the conversion.</param>
            <param name="length">The length of items to copy in the out <see cref="T:System.Collections.Generic.List`1"/>. Leave this parameter to null if you want to copy all the source <see cref="T:System.Collections.IEnumerable"/>.</param>
            <returns>The result <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Tries to add multiple values to an <see cref="T:System.Collections.Generic.ICollection`1"/> if it does not contain them already.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="collection">The collection to which try to add the value</param>
            <param name="values">The values to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeIfNotContains(System.Collections.IList,System.Collections.IEnumerable@)">
            <summary>
            Tries to add multiple values to an <see cref="T:System.Collections.IList"/> if it does not contain them already.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="collection">The collection to which try to add the value</param>
            <param name="values">The values to try to add to the collection</param>
            <returns><see langword="true"/> if the value has been added to the collection, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values before a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,``0[])">
            <summary>
            Add multiple values after a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="values">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple values before a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},``0[])">
            <summary>
            Add multiple values at the top of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="values">The values to add to this <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values at the top of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeFirst``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple values after a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="nodes">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values after a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeAfter``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{``0}}@)">
            <summary>
            Add multiple values after a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple values before a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeBefore``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}@,``0[])">
            <summary>
            Add multiple values before a specified node in a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="node">The node before which to add the values</param>
            <param name="values">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.LinkedListNode{``0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},``0[])">
            <summary>
            Add multiple values at the end of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="values">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.AddRangeLast``1(WinCopies.Collections.DotNetFix.ILinkedList{``0},System.Collections.Generic.IEnumerable{``0}@)">
            <summary>
            Add multiple values at the end of a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>. For better performance, use the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
            <param name="collection">The <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/> into which add the values.</param>
            <param name="array">The values to add to a <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.SetProperty(System.Object,System.String,System.String,System.Object,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.Util.FieldValidateValueCallback,System.Boolean@,WinCopies.Util.FieldValueChangedCallback)">
            <summary>
            Sets a value to a property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="fieldName">The field related to the property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The declaring types of the given property and field name doesn't correspond. OR The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.SetProperty(System.Object,System.String,System.Object,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.Util.PropertyValidateValueCallback,System.Boolean@,WinCopies.Util.PropertyValueChangedCallback)">
            <summary>
            Sets a value to a property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.DisposeAndSetProperty(System.Object,System.String,System.String,WinCopies.Util.IDisposable,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.Util.FieldValidateValueCallback,System.Boolean@,WinCopies.Util.FieldValueChangedCallback)">
            <summary>
            Disposes an old value of a property then sets a new value to the given property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="fieldName">The field related to the property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The declaring types of the given property and field name doesn't correspond. OR The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.DisposeAndSetProperty(System.Object,System.String,WinCopies.Util.IDisposable,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.Util.PropertyValidateValueCallback,System.Boolean@,WinCopies.Util.PropertyValueChangedCallback)">
            <summary>
            Disposes an old value of a property then sets a new value to the given property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.GetNumValue(System.Enum,System.String@)">
            <summary>
            Gets the numeric value for an enum.
            </summary>
            <param name="enum">The enum for which get the corresponding numeric value.</param>
            <param name="enumName">Not used.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.GetNumValue(System.Enum)">
            <summary>
            Gets the numeric value for an enum.
            </summary>
            <param name="enum">The enum for which get the corresponding numeric value.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.GetNumValue``1(``0)">
            <summary>
            Gets the numeric value for an enum.
            </summary>
            <param name="enum">The enum for which get the corresponding numeric value.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.HasMultipleFlags(System.Enum)">
            <summary>
            Determines whether an enum has multiple flags.
            </summary>
            <param name="flagsEnum">The enum to check.</param>
            <returns><see langword="true"/> if <paramref name="flagsEnum"/> type has the <see cref="T:System.FlagsAttribute"/> and has multiple flags; otherwise, <see langword="false"/>.</returns>
            <remarks><paramref name="flagsEnum"/> type must have the <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:WinCopies.Util.Extensions.IsValidFlagsEnumValue(System.Enum,System.Boolean@,System.Boolean@)">
            <summary>
            Determines whether the current enum value is within the enum values range.
            </summary>
            <param name="enum">The enum value to check.</param>
            <param name="throwIfNotFlagsEnum">Whether to throw if the given enum does not have the <see cref="T:System.FlagsAttribute"/> attribute.</param>
            <param name="throwIfZero">Whether to throw if the given enum is zero.</param>
            <returns><see langword="true"/> if the given value is in the enum values range, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="enum"/> does not have the <see cref="T:System.FlagsAttribute"/> and <paramref name="throwIfNotFlagsEnum"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:WinCopies.Util.InvalidEnumArgumentException"><paramref name="enum"/> is equal to zero and the <paramref name="throwIfZero"/> parameter is set to true or <paramref name="enum"/> is lesser than zero.</exception>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidFlagsEnumValue(System.Enum,System.Boolean@,System.Boolean@)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidFlagsEnumValue(System.Enum,System.String@,System.Boolean@,System.Boolean@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotValidFlagsEnumValue(System.Enum,System.Boolean@,System.Boolean@)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the enum value is not in the required enum value range.
            </summary>
            <param name="enum">The enum value to check.</param>
            <param name="throwIfNotFlagsEnum">Whether to throw if the given enum does not have the <see cref="T:System.FlagsAttribute"/> attribute.</param>
            <param name="throwIfZero">Whether to throw if the given enum is zero.</param>
            <exception cref="T:System.ArgumentException"><paramref name="enum"/> does not have the <see cref="T:System.FlagsAttribute"/> and <paramref name="throwIfNotFlagsEnum"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:WinCopies.Util.InvalidEnumArgumentException"><paramref name="enum"/> is equal to zero and the <paramref name="throwIfZero"/> parameter is set to true or <paramref name="enum"/> is lesser than zero.</exception>
            <seealso cref="M:WinCopies.Util.Extensions.IsValidEnumValue(System.Enum)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum,System.String@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotValidFlagsEnumValue(System.Enum,System.String@,System.Boolean@,System.Boolean@)">
            <summary>
            Throws an <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> if the enum value is not in the required enum value range.
            </summary>
            <param name="enum">The enum value to check.</param>
            <param name="argumentName">The parameter name.</param>
            <param name="throwIfNotFlagsEnum">Whether to throw if the given enum does not have the <see cref="T:System.FlagsAttribute"/> attribute.</param>
            <param name="throwIfZero">Whether to throw if the given enum is zero.</param>
            <exception cref="T:System.ArgumentException"><paramref name="enum"/> does not have the <see cref="T:System.FlagsAttribute"/> and <paramref name="throwIfNotFlagsEnum"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:WinCopies.Util.InvalidEnumArgumentException"><paramref name="enum"/> is equal to zero and the <paramref name="throwIfZero"/> parameter is set to true or <paramref name="enum"/> is lesser than zero.</exception>
            <seealso cref="M:WinCopies.Util.Extensions.IsValidEnumValue(System.Enum)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the enum value is not in the required enum value range. See the Remarks section.
            </summary>
            <param name="enum">The enum value to check.</param>
            <remarks>This method doesn't read all the enum fields, but only takes care of the first and last numeric enum fields, so if the value is 1, and the enum has only defined fields for 0 and 2, this method still doesn't throw. For a method that actually reads all the enum fields, see the <see cref="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum)"/> method.</remarks>
            <seealso cref="M:WinCopies.Util.Extensions.IsValidEnumValue(System.Enum)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum,System.String@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum,System.String@)">
            <summary>
            Throws an <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> if the enum value is not in the required enum value range. See the Remarks section.
            </summary>
            <param name="enum">The enum value to check.</param>
            <param name="argumentName">The parameter name.</param>
            <remarks>This method doesn't read all the enum fields, but only takes care of the first and last numeric enum fields, so if the value is 1, and the enum has only defined fields for 0 and 2, this method still doesn't throw. For a method that actually reads all the enum fields, see the <see cref="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum)"/> method.</remarks>
            <seealso cref="M:WinCopies.Util.Extensions.IsValidEnumValue(System.Enum)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotValidEnumValue(System.Enum)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the enum value is not in the required enum value range.
            </summary>
            <param name="enum">The enum value to check.</param>
            <seealso cref="M:System.Type.IsEnumDefined(System.Object)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum,System.String@)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum,System.String@)">
            <summary>
            Throws an <see cref="T:WinCopies.Util.InvalidEnumArgumentException"/> if the enum value is not in the required enum value range. See the Remarks section.
            </summary>
            <param name="enum">The enum value to check.</param>
            <param name="argumentName">The parameter name.</param>
            <remarks>This method doesn't read all the enum fields, but only takes care of the first and last numeric enum fields, so if the value is 1, and the enum has only defined fields for 0 and 2, this method still doesn't throw. For a method that actually reads all the enum fields, see the <see cref="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum)"/> method.</remarks>
            <seealso cref="M:WinCopies.Util.Extensions.IsValidEnumValue(System.Enum)"/>
            <seealso cref="M:WinCopies.Util.Extensions.ThrowIfNotDefinedEnumValue(System.Enum)"/>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.SByte,System.SByte@,System.SByte@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="b">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="b"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="b">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="b"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int16,System.Int16@,System.Int16@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="s">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="s"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt16,System.UInt16@,System.UInt16@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="s">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="s"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="i">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="i"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="i">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="i"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="l">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="l"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt64,System.UInt64@,System.UInt64@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="l">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="l"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Single,System.Single@,System.Single@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="f">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="f"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Double,System.Double@,System.Double@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="d">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="d"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Decimal,System.Decimal@,System.Decimal@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="d">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="d"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Util.IBackgroundWorker">
            <summary>
            Represents a BackgroundWorker that runs in a MTA thread by default and automatically stops on background when reports progress.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.ApartmentState">
            <summary>
            Gets the <see cref="T:System.Threading.ApartmentState"/> of this thread.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.CancellationPending">
            <summary>
            Gets a value that indicates whether the thread must try to cancel before finished the background tasks.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.IsBusy">
            <summary>
            Gets a value that indicates whether the thread is busy.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.IsCancelled">
            <summary>
            Gets a value that indicates whether the working is cancelled.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.Progress">
            <summary>
            Gets the current progress of the working in percent.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets a value that indicates whether the thread can notify of the progress.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IBackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value that indicates whether the thread supports cancellation.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.Cancel">
            <summary>
            Cancels the working.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.Cancel(System.Object)">
            <summary>
            Cancels the working.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.CancelAsync">
            <summary>
            Cancels the working asynchronously.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.CancelAsync(System.Object)">
            <summary>
            Cancels the working asynchronously.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.ReportProgress(System.Int32,System.Object)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
            <param name="userState">
            User object.
            </param>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.Suspend">
            <summary>
            Suspends the current thread.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IBackgroundWorker.Resume">
            <summary>
            Resumes the current thread.
            </summary>
        </member>
        <member name="E:WinCopies.Util.IBackgroundWorker.DoWork">
            <summary>
            <para>Called when the background thread starts. Put your background working code here.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.Util.IBackgroundWorker.ProgressChanged">
            <summary>
            <para>Called when the background thread reports progress.</para>
            <para>The event handler is running in the main thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.Util.IBackgroundWorker.RunWorkerCompleted">
            <summary>
            <para>Called when the background thread has finished working.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="T:WinCopies.Util.DeepClone`1">
            <summary>
            Provides a delegate to indicate to a method (e.g. a constructor) how to create a deep clone of an object or value. All Ids should be preserved, if any. See the Remarks section.
            </summary>
            <typeparam name="T">The type of the object to deep-clone.</typeparam>
            <param name="obj">The object or value to deep-clone. If this parameter is <see langword="null"/>, a new object is returned.</param>
            <returns>A deep clone of <paramref name="obj"/>.</returns>
            <remarks>This delegate can be used in constructors of classes or structures that implement the <see cref="T:WinCopies.Util.IDeepCloneable"/> interface in order to pass an instance of this delegate to a parameter instead of passing directly an argument that needs reconstruction on a deep cloning operation.</remarks>
            <seealso cref="T:WinCopies.Util.IDeepCloneable"/>
        </member>
        <member name="T:WinCopies.Util.DeepCloneUsingIdsOptions`1">
            <summary>
            Provides a delegate to indicate to a method (e.g. a constructor) how to create a deep clone of an object or value. See the Remarks section.
            </summary>
            <typeparam name="T">The type of the object to deep-clone.</typeparam>
            <param name="preserveIds">A <see cref="T:System.Boolean"/> value that indicates whether to preserve IDs, if any.</param>
            <param name="obj">The object or value to deep-clone. If this parameter is <see langword="null"/>, a new object is returned.</param>
            <returns>A deep clone of <paramref name="obj"/>.</returns>
            <remarks>This delegate can be used in constructors of classes or structures that implement the <see cref="T:WinCopies.Util.IDeepCloneable"/> interface in order to pass an instance of this delegate to a parameter instead of passing directly an argument that needs reconstruction on a deep cloning operation.</remarks>
            <seealso cref="T:WinCopies.Util.IDeepCloneable"/>
        </member>
        <member name="T:WinCopies.Util.IDeepCloneable">
            <summary>
            Represents an object or a value that can be deep cloned. Note that if <see cref="P:WinCopies.Util.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/> is <see langword="true"/>, the result of the <see cref="M:WinCopies.Util.IDeepCloneable.DeepClone"/> method might not be a complete deep-clone of the current object or value.
            </summary>
            <seealso cref="P:WinCopies.Util.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/>
        </member>
        <member name="P:WinCopies.Util.IDeepCloneable.NeedsObjectsOrValuesReconstruction">
            <summary>
            Gets a value that indicates whether the current object or value has to reconstruct objects or values on deep cloning. If the current object or value contains objects or values that all implement this interface, this property should be <see langword="true"/>, unless at least one of these objects or values contains itself one or more objects and/or values that does not implement this interface.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IDeepCloneable.DeepClone">
            <summary>
            Creates a deep clone of the current object or value.
            </summary>
            <returns>A deep clone of the current object or value.</returns>
        </member>
        <member name="T:WinCopies.Util.IIDObjectDeepCloneable">
            <summary>
            Represents an object or a value that can be deep cloned. Note that if <see cref="P:WinCopies.Util.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/> is <see langword="true"/>, the result of the <see cref="M:WinCopies.Util.IDeepCloneable.DeepClone"/> <see cref="M:WinCopies.Util.IIDObjectDeepCloneable.DeepClone(System.Boolean)"/> methods might not be a complete deep-clone of the current object or value.
            </summary>
        </member>
        <member name="M:WinCopies.Util.IIDObjectDeepCloneable.DeepClone(System.Boolean)">
            <summary>
            Creates a deep clone of the current object or value.
            </summary>
            <param name="preserveIds">Whether to preserve IDs, if any.</param>
            <returns>A deep clone of the current object or value.</returns>
        </member>
        <member name="T:WinCopies.Util.DotNetFix.IDisposable">
            <summary>
            Provides a mechanism for releasing unmanaged resources.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="P:WinCopies.Util.DotNetFix.IDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the current object is disposed.
            </summary>
        </member>
        <member name="T:WinCopies.Util.ObjectDisposingException">
            <summary>
            The exception that is thrown when an operation is performed on a disposing object.
            </summary>
        </member>
        <member name="M:WinCopies.Util.ObjectDisposingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.ObjectDisposingException"/> class with a string containing the name of the disposing object.
            </summary>
            <param name="objectName">A string containing the name of the disposing object.</param>
        </member>
        <member name="M:WinCopies.Util.ObjectDisposingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.ObjectDisposingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException"/> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.Util.ObjectDisposingException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.ObjectDisposingException"/> class with the specified object name and message.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:WinCopies.Util.ObjectDisposingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Util.ObjectDisposingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:WinCopies.Util.ObjectDisposingException.Message">
            <summary>
            Gets the message that describes the error.
            </summary>
        </member>
        <member name="P:WinCopies.Util.ObjectDisposingException.ObjectName">
            <summary>
            Gets the name of the disposed object.
            </summary>
        </member>
        <member name="M:WinCopies.Util.ObjectDisposingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Retrieves the System.Runtime.Serialization.SerializationInfo object with the parameter name and additional exception information.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:WinCopies.Util.Result">
            <summary>
            This enum is designed as an extension of the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Result.Error">
            <summary>
            An error as occurred.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Result.Canceled">
            <summary>
            The operation has been canceled.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Result.None">
            <summary>
            The operation did not return any particular value. This value is the same as returning a <see langword="null"/> <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Result.False">
            <summary>
            The operation returned False. This value is the same number as <see langword="false"/>.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Result.True">
            <summary>
            The operation returned True. This value is the same number as <see langword="true"/>.
            </summary>
        </member>
        <member name="T:WinCopies.Util.Predicate">
            <summary>
            Delegate for a non-generic predicate.
            </summary>
            <param name="value">The value to test</param>
            <returns><see langword="true"/> if the predicate success, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Util.Func">
            <summary>
            Represents a delegate that returns an object.
            </summary>
            <returns>Any object.</returns>
        </member>
        <member name="T:WinCopies.Util.Util">
            <summary>
            Provides some static helper methods.
            </summary>
        </member>
        <member name="M:WinCopies.Util.Util.GetCommonPredicate">
            <summary>
            Provides a <see cref="T:WinCopies.Util.Predicate"/> implementation that always returns <see langword="true"/>.
            </summary>
            <returns>Returns the <see langword="true"/> value.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetCommonPredicate``1">
            <summary>
            Provides a <see cref="T:System.Predicate`1"/> implementation that always returns <see langword="true"/>.
            </summary>
            <returns>Returns the <see langword="true"/> value.</returns>
        </member>
        <member name="T:WinCopies.Util.Util.ComparisonType">
            <summary>
            Comparison types for the If functions.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.ComparisonType.And">
            <summary>
            Check if all conditions are checked.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.ComparisonType.Or">
            <summary>
            Check if at least one condition is checked.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.ComparisonType.Xor">
            <summary>
            Check if exactly one condition is checked.
            </summary>
        </member>
        <member name="T:WinCopies.Util.Util.ComparisonMode">
            <summary>
            Comparison modes for the If functions.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.ComparisonMode.Binary">
            <summary>
            Use a binary comparison
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.ComparisonMode.Logical">
            <summary>
            Use a logical comparison
            </summary>
        </member>
        <member name="T:WinCopies.Util.Util.Comparison">
            <summary>
            Comparison to perform.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.Equal">
            <summary>
            Check for values equality
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.NotEqual">
            <summary>
            Check for values non-equality
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.Lesser">
            <summary>
            Check if a value is lesser than a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.LesserOrEqual">
            <summary>
            Check if a value is lesser than or equal to a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.Greater">
            <summary>
            Check if a value is greater than a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.GreaterOrEqual">
            <summary>
            Check if a value is greater than or equal to a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Util.Util.Comparison.ReferenceEqual">
            <summary>
            Check if an object reference is equal to a given object reference. This field only works for methods that use equality comparers (not lesser/greater ones).
            </summary>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="value">The value to compare the values of the table with.</param>
            <param name="values">The values to compare.</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Collections.IComparer,System.Predicate{System.Object}@,System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:WinCopies.Collections.IComparer`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Collections.IComparer,WinCopies.Util.Predicate@,System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:System.Collections.IComparer"/> and <see cref="T:WinCopies.Util.Predicate"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Comparison{System.Object},System.Predicate{System.Object},System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:System.Comparison`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="comparisonDelegate">The comparison delegate used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison,WinCopies.Collections.Comparison,WinCopies.Util.Predicate@,System.Object,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:WinCopies.Collections.Comparison"/> and <see cref="T:WinCopies.Util.Predicate"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="comparisonDelegate">The comparison delegate used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Collections.IEqualityComparer@,System.Predicate{System.Object},System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:System.Collections.IComparer"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="equalityComparer">The equality comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Collections.IEqualityComparer,WinCopies.Util.Predicate@,System.Object@,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:System.Collections.IComparer"/> and <see cref="T:WinCopies.Util.Predicate"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="equalityComparer">The equality comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison,WinCopies.Collections.EqualityComparison,WinCopies.Util.Predicate@,System.Object,System.Object[])">
            <summary>
            Performs a comparison by testing a value compared to an array of values using a custom <see cref="T:WinCopies.Collections.EqualityComparison"/> and <see cref="T:WinCopies.Util.Predicate"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparisonMode">Whether to perform a binary or a logical comparison.</param>
            <param name="comparison">Whether to perform an equality or an inequality comparison, and, if to perform an inequality comparison, the type of the inequality comparison to perform.</param>
            <param name="comparisonDelegate">The comparison delegate used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Object@,System.Object@,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="value">The value to compare the values of the table with.</param>
            <param name="values">The values to compare.</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Object@,System.Collections.IComparer,System.Predicate{System.Object}@,System.Object@,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values using a custom <see cref="T:WinCopies.Collections.IComparer`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Object@,System.Collections.IComparer,WinCopies.Util.Predicate@,System.Object@,System.Collections.Generic.KeyValuePair{System.Object,System.Object}[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values using a custom <see cref="T:WinCopies.Collections.IComparer`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If``1(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,``0@,``0[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="value">The value to compare the values of the table with.</param>
            <param name="values">The values to compare.</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If``1(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,System.Collections.Generic.IComparer{``0},System.Predicate{``0}@,``0@,``0[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values using a custom <see cref="T:WinCopies.Collections.IComparer`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If``2(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,``0@,``1@,System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="value">The value to compare the values of the table with.</param>
            <param name="values">The values to compare.</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.If``2(WinCopies.Util.Util.ComparisonType@,WinCopies.Util.Util.ComparisonMode@,WinCopies.Util.Util.Comparison@,``0@,System.Collections.Generic.IComparer{``1},System.Predicate{``1}@,``1@,System.Collections.Generic.KeyValuePair{``0,``1}[])">
            <summary>
            Performs a comparison by testing a value compared to an array of objects or values using a custom <see cref="T:WinCopies.Collections.IComparer`1"/> and <see cref="T:System.Predicate`1"/>.
            </summary>
            <param name="comparisonType">Whether to perform an 'and', 'or' or 'xor' comparison.</param>
            <param name="comparison">The comparison type</param>
            <param name="comparer">The comparer used to compare the values.</param>
            <param name="value">The value to compare with.</param>
            <param name="values">The values to compare.</param>
            <param name="predicate">The comparison predicate</param>
            <returns><see langword="true"/> if the comparison has succeeded for all values, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.Concatenate``1(``0[][])">
            <summary>
            Concatenates multiple arrays from a same item type. Arrays must have only one dimension.
            </summary>
            <param name="arrays">The different arrays to concatenate.</param>
            <returns>An array with a copy of all values of the given arrays.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.ConcatenateLong``1(``0[][])">
            <summary>
            Concatenates multiple arrays from a same item type using the <see cref="P:System.Array.LongLength"/> length property. Arrays must have only one dimension.
            </summary>
            <param name="arrays">The different tables to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:WinCopies.Util.Util.IsNumber(System.Object@)">
            <summary>
            Checks if a object is a numeric value (an instance of a numeric value type).
            </summary>
            <remarks>This function makes a check for the object type. For a string-parsing-checking for numerical value, look at the <see cref="M:WinCopies.Util.Util.IsNumeric(System.String@,System.Decimal@)"/> function.</remarks>
            <param name="value">The object to check</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the object given is from a numerical type.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.IsNumeric(System.String@,System.Decimal@)">
            <summary>
            Checks if a <see cref="T:System.String"/> is a numerical value.
            </summary>
            <remarks>This function tries to parse a <see cref="T:System.String"/> value to a <see cref="T:System.Decimal"/> value. Given that <see cref="T:System.Decimal"/> type is the greatest numerical type in the .NET framework, all the numbers can be supported in the .NET framework can be set in a <see cref="T:System.Decimal"/> object.</remarks>
            <param name="s">The <see cref="T:System.String"/> to check</param>
            <param name="d">The <see cref="T:System.Decimal"/> in which one set the <see cref="T:System.Decimal"/> value</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the <see cref="T:System.String"/> given is a <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetAllEnumFlags``1">
            <summary>
            Get all the flags in a flags enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>All the flags in the given enum type.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetNumValue(System.Type@,System.String@)">
            <summary>
            Gets the numeric value for a field in an enum.
            </summary>
            <param name="enumType">The enum type in which to look for the specified enum field value.</param>
            <param name="fieldName">The enum field to look for.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetArgumentNullException(System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentNullException"/> for a given argument name.
            </summary>
            <param name="argumentName">The name of the <see langword="null"/> argument.</param>
            <returns>An <see cref="T:System.ArgumentNullException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.ThrowIfNull(System.Object@,System.String@)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if a given object is null.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.Util.Util.ThrowIfNull``1(``0@,System.String@)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if a given object is null.
            </summary>
            <typeparam name="T">The type of <paramref name="obj"/>. This must be a class type.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.Util.Util.GetOrThrowIfNull(System.Object@,System.String@)">
            <summary>
            Returns <paramref name="obj"/> if it is not null, otherwise throws the <see cref="T:System.ArgumentNullException"/> that is returned by the <see cref="M:WinCopies.Util.Util.GetArgumentNullException(System.String@)"/> method.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
            <returns></returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetOrThrowIfNull``1(``0@,System.String@)">
            <summary>
            Returns <paramref name="obj"/> if it is not null, otherwise throws the <see cref="T:System.ArgumentNullException"/> that is returned by the <see cref="M:WinCopies.Util.Util.GetArgumentNullException(System.String@)"/> method.
            </summary>
            <typeparam name="T">The type of <paramref name="obj"/>. This must be a class type.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
            <returns></returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetExceptionForInvalidType``1(System.String@,System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objTypeName">The type name of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetExceptionForInvalidType``1(System.Type@,System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objType">The type of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.ThrowIfNotType``1(System.Object@,System.String@)">
            <summary>
            If <paramref name="obj"/> is not <typeparamref name="T"/>, throws the exception that is returned by the <see cref="M:WinCopies.Util.Util.GetExceptionForInvalidType``1(System.String@,System.String@)"/> method.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.Util.Util.ThrowIfNotTypeOrNull``1(System.Object@,System.String@)">
            <summary>
            If <paramref name="obj"/> is not <typeparamref name="T"/>, throws the exception that is returned by the <see cref="M:WinCopies.Util.Util.GetExceptionForInvalidType``1(System.String@,System.String@)"/> method.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.Util.Util.GetOrThrowIfNotType``1(System.Object@,System.String@)">
            <summary>
            Returns a given object when it is an instance of a given type, otherwise throws an <see cref="T:System.ArgumentException"/> with a given argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentException"/>.</param>
            <returns><paramref name="obj"/> when it is an instance of <typeparamref name="T"/>, otherwise throws an <see cref="T:System.ArgumentException"/> with <paramref name="argumentName"/> for the argument name.</returns>
        </member>
        <member name="M:WinCopies.Util.Util.GetOrThrowIfNotTypeOrNull``1(System.Object@,System.String@)">
            <summary>
            Returns a given object when it is an instance of a given type, otherwise throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="obj"/> is <see langword="null"/> or an <see cref="T:System.ArgumentException"/> with a given argument name otherwise.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentException"/>.</param>
            <returns><paramref name="obj"/> when it is an instance of <typeparamref name="T"/>, otherwise throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="obj"/> is <see langword="null"/> or an <see cref="T:System.ArgumentException"/> with <paramref name="argumentName"/> for the argument name otherwise.</returns>
        </member>
        <member name="T:WinCopies.Util.IValueObject">
            <summary>
            Represents a value container. See the <see cref="T:WinCopies.Util.IValueObject`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="T:WinCopies.Util.IValueObject`1">
            <summary>
            Represents a value container. See the <see cref="T:WinCopies.Util.IValueObject"/> for a non-generic version of this class.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IValueObject`1.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IReadOnlyValueObject.IsReadOnly">
            <summary>
            Gets a value that indicates whether this object is read-only.
            </summary>
        </member>
        <member name="P:WinCopies.Util.IReadOnlyValueObject.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="T:WinCopies.Util.ValueObjectEqualityComparer">
            <summary>
            Represents a default comparer for <see cref="T:WinCopies.Util.IReadOnlyValueObject"/>s.
            </summary>
        </member>
        <member name="M:WinCopies.Util.ValueObjectEqualityComparer.Equals(WinCopies.Util.IReadOnlyValueObject,WinCopies.Util.IReadOnlyValueObject)">
            <summary>
            Checks if two <see cref="T:WinCopies.Util.IReadOnlyValueObject"/>s are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.ValueObjectEqualityComparer.GetHashCode(WinCopies.Util.IReadOnlyValueObject)">
            <summary>
            Returns the hash code for a given <see cref="T:WinCopies.Util.IReadOnlyValueObject"/>. If <paramref name="obj"/> has a value, this function returns the hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.Util.IReadOnlyValueObject.Value"/>, otherwise this function returns the hash code of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.Util.IReadOnlyValueObject"/> for which to return the hash code.</param>
            <returns>The hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.Util.IReadOnlyValueObject.Value"/> if <paramref name="obj"/> has a value, otherwise the <paramref name="obj"/>'s hash code.</returns>
        </member>
        <member name="T:WinCopies.Util.ValueObjectEqualityComparer`1">
            <summary>
            Represents a default comparer for <see cref="T:WinCopies.Util.IReadOnlyValueObject`1"/>s.
            </summary>
        </member>
        <member name="M:WinCopies.Util.ValueObjectEqualityComparer`1.Equals(WinCopies.Util.IReadOnlyValueObject{`0},WinCopies.Util.IReadOnlyValueObject{`0})">
            <summary>
            Checks if two <see cref="T:WinCopies.Util.IReadOnlyValueObject`1"/>s are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.ValueObjectEqualityComparer`1.GetHashCode(WinCopies.Util.IReadOnlyValueObject{`0})">
            <summary>
            Returns the hash code for a given <see cref="T:WinCopies.Util.IReadOnlyValueObject`1"/>. If <paramref name="obj"/> has a value, this function returns the hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.Util.IReadOnlyValueObject`1.Value"/>, otherwise this function returns the hash code of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.Util.IReadOnlyValueObject`1"/> for which to return the hash code.</param>
            <returns>The hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.Util.IReadOnlyValueObject`1.Value"/> if <paramref name="obj"/> has a value, otherwise the <paramref name="obj"/>'s hash code.</returns>
        </member>
        <member name="T:WinCopies.Collections.Comparison">
            <summary>
            Delegate for a non-generic comparison.
            </summary>
            <param name="x">First parameter to compare</param>
            <param name="y">Second parameter to compare</param>
            <returns>An <see cref="T:System.Int32"/> which is lesser than 0 if x is lesser than y, 0 if x is equal to y and greater than 0 if x is greater than y.</returns>
        </member>
        <member name="T:WinCopies.Collections.EqualityComparison">
            <summary>
            Delegate for a non-generic equality comparison.
            </summary>
            <param name="x">First parameter to compare</param>
            <param name="y">Second parameter to compare</param>
            <returns><see langword="true"/> if x is equal to y, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Collections.EqualityComparison`1">
            <summary>
            Delegate for a generic equality comparison.
            </summary>
            <param name="x">First parameter to compare</param>
            <param name="y">Second parameter to compare</param>
            <returns><see langword="true"/> if x is equal to y, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}@)">
            <summary>
            Adds the specified new node after the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddItemAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert <paramref name="newNode"/>.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>. -or- <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. -or- <paramref name="newNode"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value after the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddItemAfter(System.Collections.Generic.LinkedListNode{`0},`0)"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}@)">
            <summary>
            Adds the specified new node before the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddItemBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert <paramref name="newNode"/>.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>. -or- <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. -or- <paramref name="newNode"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0}@,`0@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0}@,`0@)">
            <summary>
            Adds a new node containing the specified value before the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddItemBefore(System.Collections.Generic.LinkedListNode{`0},`0)"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirst(System.Collections.Generic.LinkedListNode{`0}@)">
            <summary>
            Adds the specified new node at the start of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirstItem(System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the start of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirst(`0@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirst(`0@)">
            <summary>
            Adds a new node containing the specified value at the start of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirstItem(`0)"/> method to provide a custom implementation.
            </summary>
            <param name="value">The value to add at the start of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddFirst(`0@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLast(System.Collections.Generic.LinkedListNode{`0}@)">
            <summary>
            Adds the specified new node at the end of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLastItem(System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the end of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLast(`0@)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLast(`0@)">
            <summary>
            Adds a new node containing the specified value at the end of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLastItem(`0)"/> method to provide a custom implementation.
            </summary>
            <param name="value">The value to add at the end of the <see cref="T:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <seealso cref="M:WinCopies.Collections.DotNetFix.Extensions.LinkedCollection`1.AddLast(System.Collections.Generic.LinkedListNode{`0}@)"/>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.QueueCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</value>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.#ctor(System.Collections.Generic.Queue{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> class with a custom queue.
            </summary>
            <param name="queue">The inner queue for this <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.ClearItems">
            <summary>
            Removes all objects from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override this method to provide a custom implementation.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection`1.ClearItems"/> method to provide a custom implementation.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the queue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.CopyTo(`0[]@,System.Int32@)">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> elements to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.DequeueItem">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override this method to provide a custom implementation.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection`1.DequeueItem"/> to provide a custom implementation.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is empty.</exception>
            <seealso cref="!:TryDequeue(out T)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.EnqueueItem(`0)">
            <summary>
            Adds an object to the end of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override this method to provide a custom implementation.
            </summary>
            <param name="item">The object to add to the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.Enqueue(`0@)">
            <summary>
            Adds an object to the end of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection`1.EnqueueItem(`0)"/> method to provide a custom implementation.
            </summary>
            <param name="item">The object to add to the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is empty.</exception>
            <seealso cref="!:TryPeek(out T)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.ToArray">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>, if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</value>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.#ctor(System.Collections.Generic.Queue{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> class with a custom <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <param name="queue">The inner <see cref="T:System.Collections.Generic.Queue`1"/> for this <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the queue; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.CopyTo(`0[]@,System.Int32@)">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> elements to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/> is empty.</exception>
            <seealso cref="!:TryPeek(out T)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.EnumerableQueue.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for this <see cref="T:WinCopies.Collections.DotNetFix.EnumerableQueue"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for this <see cref="T:WinCopies.Collections.DotNetFix.EnumerableQueue"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.EnumerableQueue.Enumerator.#ctor(WinCopies.Collections.DotNetFix.EnumerableQueue@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.EnumerableQueue.Enumerator"/> class.
            </summary>
            <param name="queue">The <see cref="T:WinCopies.Collections.DotNetFix.EnumerableQueue"/> to enumerate.</param>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.SimpleLinkedList.Count">
            <summary>
            Gets the number of items in the current list.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.SimpleLinkedList.Add(System.Object@)">
            <summary>
            Adds a given item to the current list.
            </summary>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.SimpleLinkedList.AddItem(System.Object,System.Boolean@)">
            <summary>
            When overridden in a derived class, adds a given item to the current list.
            </summary>
            <param name="value">The item to add.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.SimpleLinkedList.Remove">
            <summary>
            Removes the first or last item from the current list, depending on the linked list type (FIFO/LIFO).
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.SimpleLinkedList.RemoveItem">
            <summary>
            When overridden in a derived class, removes the first or last item from the current list, depending on the linked list type (FIFO/LIFO).
            </summary>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.SimpleLinkedListBase.IsReadOnly">
            <summary>
            Gets a value indicating whether the current list is read-only.
            </summary>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.QueueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</value>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.#ctor(System.Collections.Queue@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> class with a custom queue.
            </summary>
            <param name="queue">The inner queue for this <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.ClearItems">
            <summary>
            Removes all objects from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override this method to provide a custom implementation.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Clear">
            <summary>
            Removes all objects from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection.ClearItems"/> method to provide a custom implementation.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in <see cref="P:WinCopies.Collections.DotNetFix.QueueCollection.InnerQueue"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> elements to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional. -or- The number of elements in the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is greater than the available space from index to the end of the destination array.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.DequeueItem">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override this method to provide a custom implementation.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection.DequeueItem"/> to provide a custom implementation.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.EnqueueItem(System.Object@)">
            <summary>
            Adds an object to the end of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override this method to provide a custom implementation.
            </summary>
            <param name="item">The object to add to the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Enqueue(System.Object@)">
            <summary>
            Adds an object to the end of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.QueueCollection.EnqueueItem(System.Object@)"/> method to provide a custom implementation.
            </summary>
            <param name="item">The object to add to the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The value can be <see langword="null"/> for reference types.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.ToArray">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.QueueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</value>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.#ctor(System.Collections.Queue@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> class with a custom queue.
            </summary>
            <param name="queue">The inner queue for this <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The value can be <see langword="null"/> for reference types.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:System.Collections.Queue"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> elements to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional. -or- The number of elements in the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is greater than the available space from index to the end of the destination array.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The type of the source <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> without removing it.
            </summary>
            <returns>The object at the beginning of the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.ToArray">
            <summary>
            Copies the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/> elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.ReadOnlyQueueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:WinCopies.Collections.DotNetFix.QueueCollection"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.EnumerableStack.Enumerator.#ctor(WinCopies.Collections.DotNetFix.EnumerableStack@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.DotNetFix.EnumerableStack.Enumerator"/> class.
            </summary>
            <param name="stack">The <see cref="T:WinCopies.Collections.DotNetFix.EnumerableStack"/> to enumerate.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node after the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddItemAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert <paramref name="newNode"/>.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>. -or- <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. -or- <paramref name="newNode"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
            <seealso cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)"/>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node before the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddItemBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert <paramref name="newNode"/>.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>. -or- <paramref name="newNode"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. -or- <paramref name="newNode"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node at the start of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddFirstItem(System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the start of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node at the end of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddLastItem(System.Collections.Generic.LinkedListNode{`0})"/> method to provide a custom implementation.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the end of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> belongs to another <see cref="T:System.Collections.Generic.LinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value after the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddItemAfter(System.Collections.Generic.LinkedListNode{`0},`0)"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value before the specified existing node in the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddItemBefore(System.Collections.Generic.LinkedListNode{`0},`0)"/> method to provide a custom implementation.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="node"/> is not in the current <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddFirst(`0)">
            <summary>
            Adds a new node containing the specified value at the start of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddFirstItem(`0)"/> method to provide a custom implementation.
            </summary>
            <param name="value">The value to add at the start of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddLast(`0)">
            <summary>
            Adds a new node containing the specified value at the end of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>. Override the <see cref="M:WinCopies.Collections.DotNetFix.LinkedCollection`1.AddLastItem(`0)"/> method to provide a custom implementation.
            </summary>
            <param name="value">The value to add at the end of the <see cref="T:WinCopies.Collections.DotNetFix.LinkedCollection`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.IUIntIndexedCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedCollection.CopyTo(System.Array@,System.Int32)">
            <summary>
            Copies the items of this collection to a given array starting at a given index.
            </summary>
            <param name="array">The array to copy the items.</param>
            <param name="index">The index in the array from which to start to copy.</param>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.IReadOnlyUIntIndexedList.Item(System.UInt32)">
            <summary>
            Gets or sets an item at a given index in the list.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at <paramref name="index"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IReadOnlyUIntIndexedList.Contains(System.Object@)">
            <summary>
            Checks if the list contains a given value.
            </summary>
            <param name="value">The value to check.</param>
            <returns><see langword="true"/> if the list contains <paramref name="value"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IReadOnlyUIntIndexedList.IndexOf(System.Object@)">
            <summary>
            Returns the index of a given value in the list.
            </summary>
            <param name="value">The value for which return the index.</param>
            <returns>The index of <paramref name="value"/> if it was found, or <see langword="null"/> otherwise.</returns>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.IUIntIndexedList.Item(System.UInt32)">
            <summary>
            Gets the item at a given index in the list.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at <paramref name="index"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.DotNetFix.IUIntIndexedList.IsFixedSize">
            <summary>
            Gets a value that indicates whether the current list is fixed size.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedList.Add(System.Object@)">
            <summary>
            Adds a value to the list.
            </summary>
            <param name="value">The value to add.</param>
            <returns>The index of the new value in the list.</returns>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedList.Insert(System.UInt32@,System.Object@)">
            <summary>
            Inserts a value to the list.
            </summary>
            <param name="index">The index at which to add the value.</param>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedList.Remove(System.Object@)">
            <summary>
            Removes a given value from the list.
            </summary>
            <param name="value">The value to remove.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.IUIntIndexedList.RemoveAt(System.UInt32@)">
            <summary>
            Removes a value from the list at a given index.
            </summary>
            <param name="index">The index of the value to remove.</param>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"/> class that is empty.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"/> class that contains elements copied from the specified <see cref="T:System.Collections.IEnumerable"/> and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.IEnumerable"/> whose elements are copied to the new <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.DotNetFix.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.LinkedList`1"/> class that is serializable with the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/>.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</param>
        </member>
        <member name="T:WinCopies.Collections.ArrayBuilder`1">
            <summary>
            Builds arrays and lists by sizing them only when required. This class can be used to initialize your array or list before adding or removing values to it.
            </summary>
            <typeparam name="T">The type of the items.</typeparam>
        </member>
        <member name="P:WinCopies.Collections.ArrayBuilder`1.InnerList">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.LinkedList`1"/> that is used to build the arrays and collections.
            </summary>
        </member>
        <member name="P:WinCopies.Collections.ArrayBuilder`1.Last">
            <summary>
            Gets the last node of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <returns>The last <see cref="T:System.Collections.Generic.LinkedListNode`1"/> of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.ArrayBuilder`1.First">
            <summary>
            Gets the first node of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <returns>The first <see cref="T:System.Collections.Generic.LinkedListNode`1"/> of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.ArrayBuilder`1.Count">
            <summary>
            Gets the number of nodes actually contained in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <returns>The number of nodes actually contained in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value after the specified existing node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
            <exception cref="T:System.InvalidOperationException">node is not in the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node after the specified existing node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> after which to insert newNode.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">node is null. -or- newNode is null.</exception>
            <exception cref="T:System.InvalidOperationException">node is not in the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>. -or- newNode belongs to another <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            Adds a new node containing the specified value before the specified existing node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert a new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</param>
            <param name="value">The value to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
            <exception cref="T:System.InvalidOperationException">node is not in the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node before the specified existing node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> before which to insert newNode.</param>
            <param name="newNode">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">node is null. -or- newNode is null.</exception>
            <exception cref="T:System.InvalidOperationException">node is not in the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>. -or- newNode belongs to another <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddFirst(`0)">
            <summary>
            Adds a new node containing the specified value at the start of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="value">The value to add at the start of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node at the start of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the start of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
            <exception cref="T:System.InvalidOperationException">node belongs to another <see cref="T:WinCopies.Collections.DotNetFix.ILinkedList`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddLast(`0)">
            <summary>
            Adds a new node containing the specified value at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="value">The value to add at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> containing value.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Adds the specified new node at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The new <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to add at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
            <exception cref="T:System.InvalidOperationException">node belongs to another <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeFirst(`0[])">
            <summary>
            Add multiple values at the top of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="values">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeFirst(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Add multiple values at the top of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeFirst(System.Collections.Generic.LinkedListNode{`0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeFirst(System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{`0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the top of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeLast(`0[])">
            <summary>
            Add multiple values at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="values">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeLast(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Add multiple values at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeLast(System.Collections.Generic.LinkedListNode{`0}[])">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeLast(System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{`0}}@)">
            <summary>
            Add multiple <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="array">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeBefore(System.Collections.Generic.LinkedListNode{`0}@,`0[])">
            <summary>
            Add multiple values before a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node before which to add the values</param>
            <param name="values">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeBefore(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Add multiple values before a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeBefore(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}[])">
            <summary>
            Add multiple values before a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node before which to add the values</param>
            <param name="nodes">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeBefore(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{`0}}@)">
            <summary>
            Add multiple values before a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node before which to add the values</param>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeAfter(System.Collections.Generic.LinkedListNode{`0}@,`0[])">
            <summary>
            Add multiple values after a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node after which to add the values</param>
            <param name="values">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeAfter(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Add multiple values after a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
            <returns>The added <see cref="T:System.Collections.Generic.LinkedListNode`1"/>'s.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeAfter(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.LinkedListNode{`0}[])">
            <summary>
            Add multiple values after a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node after which to add the values</param>
            <param name="nodes">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.AddRangeAfter(System.Collections.Generic.LinkedListNode{`0}@,System.Collections.Generic.IEnumerable{System.Collections.Generic.LinkedListNode{`0}}@)">
            <summary>
            Add multiple values after a specified node in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The node after which to add the values</param>
            <param name="array">The values to add to this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.Clear">
            <summary>
            Removes all nodes from this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.Contains(`0)">
            <summary>
            Determines whether a value is in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="value">The value to locate in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>. The value can be null for reference types.</param>
            <returns>true if value is found in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.Find(`0)">
            <summary>
            Finds the first node that contains the specified value.
            </summary>
            <param name="value">The value to locate in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The first <see cref="T:System.Collections.Generic.LinkedListNode`1"/> that contains the specified value, if found; otherwise, null.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.FindLast(`0)">
            <summary>
            Finds the last node that contains the specified value.
            </summary>
            <param name="value">The value to locate in this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns>The last <see cref="T:System.Collections.Generic.LinkedListNode`1"/> that contains the specified value, if found; otherwise, null.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.LinkedList`1"/>.Enumerator for this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and returns the data needed to serialize this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> instance.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object that contains the information required to serialize this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> object that contains the source and destination of the serialized stream associated with this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.OnDeserialization(System.Object)">
            <summary>
            Implements the System.Runtime.Serialization.ISerializable interface and raises the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">The source of the deserialization event.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object associated with the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> instance is invalid.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified value from this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="value">The value to remove from this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <returns><see langword="true"/> if the element containing value is successfully removed; otherwise, <see langword="false"/>. This method also returns <see langword="false"/> if value was not found in the original <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            Removes the specified node from this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> to remove from this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">node is null.</exception>
            <exception cref="T:System.InvalidOperationException">node is not in the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.RemoveFirst">
            <summary>
            Removes the node at the start of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.RemoveLast">
            <summary>
            Removes the node at the end of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> is empty.</exception>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class with a given <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="enumerable">An enumerable from which to add values.</param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.#ctor(System.Collections.Generic.LinkedList{`0}@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> class using a custom <see cref="T:System.Collections.Generic.LinkedList`1"/> to build the arrays and collections.
            </summary>
            <param name="innerList"></param>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.ToArray(System.Boolean@)">
            <summary>
            Returns an array with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="remove">Indicates whether items have to be removed from the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> after they has been added to the new list.</param>
            <returns>An array with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.ToArrayList(System.Boolean@)">
            <summary>
            Returns an <see cref="T:System.Collections.ArrayList"/> with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="remove">Indicates whether items have to be removed from the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> after they has been added to the new list.</param>
            <returns>An <see cref="T:System.Collections.ArrayList"/> with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.ArrayBuilder`1.ToList(System.Boolean@)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.List`1"/> with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.
            </summary>
            <param name="remove">Indicates whether items have to be removed from the current <see cref="T:WinCopies.Collections.ArrayBuilder`1"/> after they has been added to the new list.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> with the items of this <see cref="T:WinCopies.Collections.ArrayBuilder`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.Enumerator`4.#ctor(`1)">
            <summary>
            When overridden in a derived class, initializes a new instance of the <see cref="T:WinCopies.Collections.Enumerator`2"/> class.
            </summary>
            <param name="enumerator">The enumerator to enumerate.</param>
        </member>
        <member name="M:WinCopies.Collections.Enumerator`2.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When overridden in a derived class, initializes a new instance of the <see cref="T:WinCopies.Collections.Enumerator`2"/> class.
            </summary>
            <param name="enumerable">An enumerable from which to get an enumerator to enumerate.</param>
        </member>
        <member name="M:WinCopies.Collections.Enumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            When overridden in a derived class, initializes a new instance of the <see cref="T:WinCopies.Collections.Enumerator`2"/> class.
            </summary>
            <param name="enumerator">The enumerator to enumerate.</param>
        </member>
        <member name="T:WinCopies.Collections.IReadOnlyTreeNode">
            <summary>
            Represents a tree node.
            </summary>
        </member>
        <member name="P:WinCopies.Collections.IReadOnlyTreeNode.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
        </member>
        <member name="T:WinCopies.Collections.ITreeNode`1">
            <summary>
            Represents a tree node.
            </summary>
        </member>
        <member name="T:WinCopies.Collections.IReadOnlyTreeNode`1">
            <summary>
            Represents a tree node.
            </summary>
        </member>
        <member name="T:WinCopies.Collections.TreeNode`1">
            <summary>
            Represents a tree node.
            </summary>
            <typeparam name="T">The value and item type.</typeparam>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.IsReadOnly">
            <summary>
            Gets a value that indicates whether this <see cref="T:WinCopies.Collections.TreeNode`1"/> is read-only. This value is always <see langword="false"/> for this class.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.System#IEquatable{WinCopies#Util#IReadOnlyValueObject}#Equals(WinCopies.Util.IReadOnlyValueObject)">
            <summary>
            Determines whether this object is equal to a given object.
            </summary>
            <param name="obj">Object to compare to the current object.</param>
            <returns><see langword="true"/> if this object is equal to <paramref name="obj"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.System#IEquatable{WinCopies#Util#IReadOnlyValueObject{T}}#Equals(WinCopies.Util.IReadOnlyValueObject{`0})">
            <summary>
            Determines whether this object is equal to a given object.
            </summary>
            <param name="obj">Object to compare to the current object.</param>
            <returns><see langword="true"/> if this object is equal to <paramref name="obj"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.Parent">
            <summary>
            Gets the parent of the current node.
            </summary>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to a given object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns><see langword="true"/> if the current object is equal to <paramref name="obj"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.GetHashCode">
            <summary>
            Returns a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Dispose(System.Boolean)">
            <summary>
            Removes the unmanaged resources and the managed resources if needed. If you override this method, you should call this implementation of this method in your override implementation to avoid unexpected results when using this object laater.
            </summary>
            <param name="disposing"><see langword="true"/> to dispose managed resources, otherwise <see langword="false"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.GetDefaultTreeNodeItemsComparer">
            <summary>
            Returns the default comparer for <see cref="T:WinCopies.Collections.TreeNode`1"/> objects.
            </summary>
            <returns>The default comparer for <see cref="T:WinCopies.Collections.TreeNode`1"/> objects.</returns>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.Items">
            <summary>
            Gets the inner <see cref="T:System.Collections.Generic.IList`1"/> of this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.TreeNode`1"/> class using a custom value.
            </summary>
            <param name="value">The value of the new <see cref="T:WinCopies.Collections.TreeNode`1"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.#ctor(`0,System.Collections.Generic.IList{WinCopies.Collections.TreeNode{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.Collections.TreeNode`1"/> class using a custom value and inner <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="value">The value of the new <see cref="T:WinCopies.Collections.TreeNode`1"/>.</param>
            <param name="items">A custom inner <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index in this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The given index is lesser than 0 or greater than <see cref="P:WinCopies.Collections.TreeNode`1.Count"/>.</exception>
            <seealso cref="!:SetItem(in TreeNode&lt;T&gt;)"/>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.Count">
            <summary>
            Gets the number of items that this <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains.
            </summary>
        </member>
        <member name="P:WinCopies.Collections.TreeNode`1.IsFixedSize">
            <summary>
            Gets a value that indicates whether this <see cref="T:WinCopies.Collections.TreeNode`1"/> is fixed-size.
            </summary>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> for this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> for this <see cref="T:WinCopies.Collections.TreeNode`1"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Add(WinCopies.Collections.TreeNode{`0})">
            <summary>
            Adds a new item to the end of this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Contains(WinCopies.Collections.TreeNode{`0})">
            <summary>
            Checks if this <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains a given <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="item">The <see cref="T:WinCopies.Collections.TreeNode`1"/> to look for.</param>
            <returns><see langword="true"/> if this <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains the given <see cref="T:WinCopies.Collections.TreeNode`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Contains(`0)">
            <summary>
            Checks if this <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains a given item.
            </summary>
            <param name="item">The item to look for.</param>
            <returns><see langword="true"/> if this <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains the given item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.IndexOf(WinCopies.Collections.TreeNode{`0})">
            <summary>
            Returns the idnex of a given item in this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="item">The item for which to find the index.</param>
            <returns>The index of <paramref name="item"/> if this <see cref="T:WinCopies.Collections.TreeNode`1"/> contains <paramref name="item"/>, otherwise -1.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.IndexOf(`0)">
            <summary>
            Returns the idnex of a given item in this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="item">The item for which to find out the index.</param>
            <returns>The index of <paramref name="item"/> if this <see cref="T:WinCopies.Collections.TreeNode`1"/> contains <paramref name="item"/>, otherwise -1.</returns>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at a given index.
            </summary>
            <param name="index">The index from which to remove the item.</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is lesser than 0 or greater than <see cref="P:WinCopies.Collections.TreeNode`1.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">This <see cref="T:WinCopies.Collections.TreeNode`1"/> is fixed-size.</exception>
            <seealso cref="M:WinCopies.Collections.TreeNode`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Remove(WinCopies.Collections.TreeNode{`0})">
            <summary>
            Removes a given item from the node. The current node must directly contains the given item. This function removes <paramref name="item"/> and returns <see langword="true"/> if <paramref name="item"/> is found, otherwise <see langword="false"/> is returned.
            </summary>
            <param name="item">The item to remove from the current node.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is removed, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:WinCopies.Collections.TreeNode`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Remove(`0)">
            <summary>
            Removes a given item from the node. The current node must directly contains the given item. This function removes <paramref name="item"/> and returns <see langword="true"/> if <paramref name="item"/> is found, otherwise <see langword="false"/> is returned.
            </summary>
            <param name="item">The item to remove from the current node.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is removed, otherwise <see langword="false"/>.</returns>
            <seealso cref="M:WinCopies.Collections.TreeNode`1.RemoveItem(System.Int32)"/>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Insert(System.Int32,WinCopies.Collections.TreeNode{`0})">
            <summary>
            Inserts a given item at a specified index in this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="index">The index of the new item.</param>
            <param name="item">The item to insert in this <see cref="T:WinCopies.Collections.TreeNode`1"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.CopyTo(WinCopies.Collections.TreeNode{`0}[],System.Int32)">
            <summary>
            Performs a shallow copy of the items that the current <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains starting at a given index of a given array of <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <param name="array">The array in which to store the shallow copies of the items that <see cref="T:WinCopies.Collections.TreeNode`1"/> directly contains.</param>
            <param name="arrayIndex">The index from which to store the items in <paramref name="array"/>.</param>
        </member>
        <member name="M:WinCopies.Collections.TreeNode`1.Clear">
            <summary>
            Removes all items of this <see cref="T:WinCopies.Collections.TreeNode`1"/>.
            </summary>
            <seealso cref="M:WinCopies.Collections.TreeNode`1.ClearItems"/>
        </member>
        <member name="M:WinCopies.Collections.ThrowHelper.GetReadOnlyListOrCollectionException">
            <summary>
            Returns an exception indicating that a list or collection is read-only.
            </summary>
            <returns>An exception indicating that a list or collection is read-only.</returns>
        </member>
        <member name="M:WinCopies.Collections.ThrowHelper.GetEmptyListOrCollectionException">
            <summary>
            Returns an exception indicating that a list or collection is empty.
            </summary>
            <returns>An exception indicating that a list or collection is empty.</returns>
        </member>
        <member name="M:WinCopies.Collections.ThrowHelper.ThrowIfEmpty(WinCopies.Collections.ICountable@)">
            <summary>
            Throws the exception given by <see cref="M:WinCopies.Collections.ThrowHelper.GetEmptyListOrCollectionException"/> if the <see cref="P:WinCopies.Collections.ICountable.Count"/> property of a given <see cref="T:WinCopies.Collections.ICountable"/> object is equal to 0.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.Collections.ICountable"/> object for which to check the <see cref="P:WinCopies.Collections.ICountable.Count"/> property.</param>
        </member>
        <member name="M:WinCopies.Collections.ThrowHelper.ThrowIfEmpty(WinCopies.Collections.IUIntCountable@)">
            <summary>
            Throws the exception given by <see cref="M:WinCopies.Collections.ThrowHelper.GetEmptyListOrCollectionException"/> if the <see cref="P:WinCopies.Collections.IUIntCountable.Count"/> property of a given <see cref="T:WinCopies.Collections.IUIntCountable"/> object is equal to 0.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.Collections.IUIntCountable"/> object for which to check the <see cref="P:WinCopies.Collections.IUIntCountable.Count"/> property.</param>
        </member>
    </members>
</doc>
