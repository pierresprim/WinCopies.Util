<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinCopies.Util</name>
    </assembly>
    <members>
        <member name="T:WinCopies.Resources.ExceptionMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ArgumentMustBeAnInstanceOf">
            <summary>
              Looks up a localized string similar to {0} must be an instance of {1}..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ArgumentMustBeFromEnumAndNotValue">
            <summary>
              Looks up a localized string similar to {0} must be a value of the {1} enum and can&apos;t be the {2} value..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ArrayHasNonZeroLowerBound">
            <summary>
              Looks up a localized string similar to The given array has a non-zero lower bound..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ArrayHasNotEnoughSpace">
            <summary>
              Looks up a localized string similar to The given array has not enough space..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ArrayWithMoreThanOneDimension">
            <summary>
              Looks up a localized string similar to Arrays must have only one dimension..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.CollectionChangedDuringEnumeration">
            <summary>
              Looks up a localized string similar to The collection has changed during enumeration..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.CurrentObjectIsDisposing">
            <summary>
              Looks up a localized string similar to The current object or value is disposing..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.DeclaringTypesNotCorrespond">
            <summary>
              Looks up a localized string similar to The declaring types of &apos;{0}&apos; and &apos;{1}&apos; do not correspond. The declaring types of &apos;{0}&apos; and &apos;{1}&apos; must correspond for read-only properties when an integrity check is performed..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.EnumeratorIsNotStartedOrDisposed">
            <summary>
              Looks up a localized string similar to The enumeration has not started or the enumerator is disposed..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.FieldOrPropertyNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; couldn&apos;t be found in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.GivenTypeIsNotSupported">
            <summary>
              Looks up a localized string similar to The given type is not supported..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to The index passed to parameter {0} was out of range..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.InvalidArgument">
            <summary>
              Looks up a localized string similar to The argument passed to parameter {0} is not supported..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The enum value is not in the enum values range..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.MoreThanOneOccurencesWereFound">
            <summary>
              Looks up a localized string similar to More than one occurences were found..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.MultidimensionalArraysNotSupported">
            <summary>
              Looks up a localized string similar to Multidimensional arrays are not supported..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.NonFlagsEnumException">
            <summary>
              Looks up a localized string similar to The given enum does not have the FlagsAttribute attribute..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.NonFlagsEnumTypeException">
            <summary>
              Looks up a localized string similar to The given enum type does not have the FlagsAttribute attribute..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.NoValidEnumValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; must be one of the {1} enum values..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.OneOrMoreKeyIsNull">
            <summary>
              Looks up a localized string similar to One or more key is null..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.OneOrMoreSameKey">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; has one or more same key..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.Overflow">
            <summary>
              Looks up a localized string similar to The argument passed to parameter {0} caused an overflow..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ParameterIsNotAnExpectedValue">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not an expected value..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This collection is read-only..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.ResourceNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to The object or resource requested was not found in the given collection or no object or resource in the given collection matches the given criteria..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.SequenceContainsNoItemOrNoItemMatchedGivenPredicate">
            <summary>
              Looks up a localized string similar to The sequence contains no item or no item matched the given predicate..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.StringIsNullEmptyOrWhiteSpace">
            <summary>
              Looks up a localized string similar to The given value is null, empty or white space. The given value is: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WinCopies.Resources.ExceptionMessages.StringParameterEmptyOrWhiteSpaces">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is empty or white space..
            </summary>
        </member>
        <member name="T:WinCopies.Util.Extensions">
            <summary>
            Provides some static extension methods.
            </summary>
        </member>
        <member name="M:WinCopies.Util.Extensions.Is(System.Object,System.Boolean@,System.Type[])">
            <summary>
            Checks if the current object is assignable from at least one type of a given <see cref="T:System.Type"/> array.
            </summary>
            <param name="obj">The object from which check the type</param>
            <param name="typeEquality"><see langword="true"/> to preserve type equality, regardless of the type inheritance, otherwise <see langword="false"/></param>
            <param name="types">The types to compare</param>
            <returns><see langword="true"/> if the current object is assignable from at least one of the given types, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.SetProperty(System.Object,System.String,System.String,System.Object,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.FieldValidateValueCallback,System.Boolean@,WinCopies.FieldValueChangedCallback)">
            <summary>
            Sets a value to a property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="fieldName">The field related to the property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The declaring types of the given property and field name doesn't correspond. OR The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.SetProperty(System.Object,System.String,System.Object,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.PropertyValidateValueCallback,System.Boolean@,WinCopies.PropertyValueChangedCallback)">
            <summary>
            Sets a value to a property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.DisposeAndSetProperty(System.Object,System.String,System.String,WinCopies.IDisposable,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.FieldValidateValueCallback,System.Boolean@,WinCopies.FieldValueChangedCallback)">
            <summary>
            Disposes an old value of a property then sets a new value to the given property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="fieldName">The field related to the property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The declaring types of the given property and field name doesn't correspond. OR The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.DisposeAndSetProperty(System.Object,System.String,WinCopies.IDisposable,System.Type,System.Boolean@,System.Reflection.BindingFlags,System.String,System.Boolean@,System.Boolean@,WinCopies.PropertyValidateValueCallback,System.Boolean@,WinCopies.PropertyValueChangedCallback)">
            <summary>
            Disposes an old value of a property then sets a new value to the given property if the new value is different.
            </summary>
            <param name="obj">The object in which to set the property.</param>
            <param name="propertyName">The name of the given property.</param>
            <param name="newValue">The value to set.</param>
            <param name="declaringType">The actual declaring type of the property.</param>
            <param name="throwIfReadOnly">Whether to throw if the given property is read-only.</param>
            <param name="bindingFlags">The <see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <param name="paramName">The parameter from which the value was passed to this method.</param>
            <param name="setOnlyIfNotNull">Whether to set only if the given value is not null.</param>
            <param name="throwIfNull">Whether to throw if the given value is null.</param>
            <param name="validateValueCallback">The callback used to validate the given value. You can leave this parameter to null if you don't want to perform validation.</param>
            <param name="throwIfValidationFails">Whether to throw if the validation of <paramref name="validateValueCallback"/> fails.</param>
            <param name="valueChangedCallback">The callback used to perform actions after the property is set. You can leave this parameter to null if you don't want to perform actions after the property is set.</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the setting succeeded and the old value of the given property (or <see langword="null"/> if the property does not contain any value nor reference).</returns>
            <exception cref="T:System.InvalidOperationException">The given property is read-only and <paramref name="throwIfReadOnly"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The new value is null and <paramref name="throwIfNull"/> is set to <see langword="true"/>.</exception>
            <exception cref="T:System.Exception"><paramref name="validateValueCallback"/> failed and <paramref name="throwIfValidationFails"/> is set to <see langword="true"/>. This exception is the exception that was returned by <paramref name="validateValueCallback"/> if it was not null or an <see cref="T:System.ArgumentException"/> otherwise.</exception>
        </member>
        <member name="M:WinCopies.Util.Extensions.GetNumValue(System.Enum)">
            <summary>
            Gets the numeric value for an enum.
            </summary>
            <param name="enum">The enum for which get the corresponding numeric value.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.GetNumValue``1(``0)">
            <summary>
            Gets the numeric value for an enum.
            </summary>
            <param name="enum">The enum for which get the corresponding numeric value.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.HasMultipleFlags(System.Enum)">
            <summary>
            Determines whether an enum has multiple flags.
            </summary>
            <param name="flagsEnum">The enum to check.</param>
            <returns><see langword="true"/> if <paramref name="flagsEnum"/> type has the <see cref="T:System.FlagsAttribute"/> and has multiple flags; otherwise, <see langword="false"/>.</returns>
            <remarks><paramref name="flagsEnum"/> type must have the <see cref="T:System.FlagsAttribute"/>.</remarks>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.SByte,System.SByte@,System.SByte@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="b"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Byte,System.Byte@,System.Byte@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="b"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int16,System.Int16@,System.Int16@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="s"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt16,System.UInt16@,System.UInt16@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="s"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="i"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="i"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="l"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.UInt64,System.UInt64@,System.UInt64@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="l"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Single,System.Single@,System.Single@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="f"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Double,System.Double@,System.Double@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="d"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.Util.Extensions.Between(System.Decimal,System.Decimal@,System.Decimal@)">
            <summary>
            Checks if a number is between two given numbers.
            </summary>
            <param name="value">The number to check.</param>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if <paramref name="d"/> is between <paramref name="x"/> and <paramref name="y"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Diagnostics.ComparisonType">
            <summary>
            Comparison types for the If functions.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.ComparisonType.And">
            <summary>
            Check if all conditions are checked.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.ComparisonType.Or">
            <summary>
            Check if at least one condition is checked.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.ComparisonType.Xor">
            <summary>
            Check if exactly one condition is checked.
            </summary>
        </member>
        <member name="T:WinCopies.Diagnostics.ComparisonMode">
            <summary>
            Comparison modes for the If functions.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.ComparisonMode.Binary">
            <summary>
            Use a binary comparison
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.ComparisonMode.Logical">
            <summary>
            Use a logical comparison
            </summary>
        </member>
        <member name="T:WinCopies.Diagnostics.Comparison">
            <summary>
            Comparison to perform.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.Equal">
            <summary>
            Check for values equality
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.NotEqual">
            <summary>
            Check for values non-equality
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.Less">
            <summary>
            Check if a value is lesser than a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.LessOrEqual">
            <summary>
            Check if a value is lesser than or equal to a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.Greater">
            <summary>
            Check if a value is greater than a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.GreaterOrEqual">
            <summary>
            Check if a value is greater than or equal to a given value. This field only works for methods that use lesser/greater/equal comparers.
            </summary>
        </member>
        <member name="F:WinCopies.Diagnostics.Comparison.ReferenceEqual">
            <summary>
            Check if an object reference is equal to a given object reference. This field only works for methods that use equality comparers (not lesser/greater ones).
            </summary>
        </member>
        <member name="T:WinCopies.Collections.Comparison">
            <summary>
            Delegate for a non-generic comparison.
            </summary>
            <param name="x">First parameter to compare.</param>
            <param name="y">Second parameter to compare.</param>
            <returns>An <see cref="T:System.Int32"/> which is lesser than 0 if x is lesser than y, 0 if x is equal to y and greater than 0 if x is greater than y.</returns>
        </member>
        <member name="T:WinCopies.Collections.EqualityComparison">
            <summary>
            Delegate for a non-generic equality comparison.
            </summary>
            <param name="x">First parameter to compare.</param>
            <param name="y">Second parameter to compare.</param>
            <returns><see langword="true"/> if x is equal to y, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Collections.Generic.EqualityComparison`1">
            <summary>
            Delegate for a generic equality comparison.
            </summary>
            <typeparam name="T">The type of the current delegate parameters.</typeparam>
            <param name="x">First parameter to compare.</param>
            <param name="y">Second parameter to compare.</param>
            <returns><see langword="true"/> if x is equal to y, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Delegates">
            <summary>
            This class contains static methods that can be used as delegates.
            </summary>
        </member>
        <member name="T:WinCopies.Bool">
            <summary>
            This class contains static methods that can be used as delegates for <see cref="T:System.Boolean"/> values.
            </summary>
        </member>
        <member name="T:WinCopies.Predicate">
            <summary>
            Delegate for a non-generic predicate.
            </summary>
            <param name="value">The value to test.</param>
            <returns><see langword="true"/> if the predicate success, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:WinCopies.Func">
            <summary>
            Represents a delegate that returns an object.
            </summary>
            <returns>Any object.</returns>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference (<see langword="Nothing"/> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <remarks>This constructor will create a localized message saying that the <paramref name="argumentName"/> parameter was invalid because the value passed in was invalid, and that the value should be one of the values in the enumeration class.</remarks>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.Int64,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a custom message, the argument name, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Int64,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a custom message, the argument name, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
        </member>
        <member name="M:WinCopies.InvalidEnumArgumentException.#ctor(System.String,System.String,System.Enum)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.InvalidEnumArgumentException"/> class with a message generated from the argument, the invalid value, and an enumeration class.
            </summary>
            <param name="message">A custom message describing this exception.</param>
            <param name="argumentName">The name of the argument that caused the exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
        </member>
        <member name="P:WinCopies.InvalidEnumArgumentException.Message">
            <summary>
            Gets the error message and the parameter name, or only the error message if no parameter name is set.
            </summary>
            <returns>A text string describing the details of the exception. The value of this property takes one of two forms: Condition Value The paramName is a null reference (Nothing in Visual Basic) or of zero length. The message string passed to the constructor. The paramName is not null reference (Nothing in Visual Basic) and it has a length greater than zero. The message string appended with the name of the invalid parameter.</returns>
        </member>
        <member name="P:WinCopies.InvalidEnumArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
            <returns>The parameter name.</returns>
        </member>
        <member name="P:WinCopies.InvalidEnumArgumentException.InvalidValue">
            <summary>
            The value of the argument that failed.
            </summary>
        </member>
        <member name="T:WinCopies.StreamCommit">
            <summary>
            The <see cref="T:WinCopies.StreamCommit"/> enumeration constants specify the conditions for performing the commit operation in the IStorage::Commit and <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)"/> methods.
            </summary>
        </member>
        <member name="F:WinCopies.StreamCommit.Default">
            <summary>
            You can specify this condition with <see cref="F:WinCopies.StreamCommit.Consolidate"/>, or some combination of the other three flags in this list of elements. Use this value to increase the readability of code.
            </summary>
        </member>
        <member name="F:WinCopies.StreamCommit.Overwrite">
            <summary>
            <para>The commit operation can overwrite existing data to reduce overall space requirements. This value is not recommended for typical usage because it is not as robust as the default value. In this case, it is possible for the commit operation to fail after the old data is overwritten, but before the new data is completely committed. Then, neither the old version nor the new version of the storage object will be intact.</para>
            <para>You can use this value in the following cases:</para>
            <para>The user is willing to risk losing the data.</para>
            <para>The low-memory save sequence will be used to safely save the storage object to a smaller file.</para>
            <para>A previous commit returned STG_E_MEDIUMFULL, but overwriting the existing data would provide enough space to commit changes to the storage object.</para>
            <para>Be aware that the commit operation verifies that adequate space exists before any overwriting occurs. Thus, even with this value specified, if the commit operation fails due to space requirements, the old data is safe. It is possible, however, for data loss to occur with the <see cref="F:WinCopies.StreamCommit.Overwrite"/> value specified if the commit operation fails for any reason other than lack of disk space.</para>
            </summary>
        </member>
        <member name="F:WinCopies.StreamCommit.OnlyIfCurrent">
            <summary>
            Prevents multiple users of a storage object from overwriting each other's changes. The commit operation occurs only if there have been no changes to the saved storage object because the user most recently opened it. Thus, the saved version of the storage object is the same version that the user has been editing. If other users have changed the storage object, the commit operation fails and returns the STG_E_NOTCURRENT value. To override this behavior, call the IStorage::Commit or <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)"/> method again using the <see cref="F:WinCopies.StreamCommit.Default"/> value.
            </summary>
        </member>
        <member name="F:WinCopies.StreamCommit.DangerouslyCommitMerelyToDiskCache">
            <summary>
            <para>Commits the changes to a write-behind disk cache, but does not save the cache to the disk. In a write-behind disk cache, the operation that writes to disk actually writes to a disk cache, thus increasing performance. The cache is eventually written to the disk, but usually not until after the write operation has already returned. The performance increase comes at the expense of an increased risk of losing data if a problem occurs before the cache is saved and the data in the cache is lost.</para>
            <para>If you do not specify this value, then committing changes to root-level storage objects is robust even if a disk cache is used. The two-phase commit process ensures that data is stored on the disk and not just to the disk cache.</para>
            </summary>
        </member>
        <member name="F:WinCopies.StreamCommit.Consolidate">
            <summary>
            Windows 2000 and Windows XP: Indicates that a storage should be consolidated after it is committed, resulting in a smaller file on disk. This flag is valid only on the outermost storage object that has been opened in transacted mode. It is not valid for streams. The <see cref="F:WinCopies.StreamCommit.Consolidate"/> flag can be combined with any other <see cref="T:WinCopies.StreamCommit"/> flags.
            </summary>
        </member>
        <member name="T:WinCopies.DotNetFix.IDisposable">
            <summary>
            Provides a mechanism for releasing unmanaged resources.
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="P:WinCopies.DotNetFix.IDisposable.IsDisposed">
            <summary>
            Gets a value that indicates whether the current object is disposed.
            </summary>
        </member>
        <member name="T:WinCopies.Result">
            <summary>
            This enum is designed as an extension of the <see cref="T:System.Boolean"/> type.
            </summary>
        </member>
        <member name="F:WinCopies.Result.Error">
            <summary>
            An error as occurred.
            </summary>
        </member>
        <member name="F:WinCopies.Result.Canceled">
            <summary>
            The operation has been canceled.
            </summary>
        </member>
        <member name="F:WinCopies.Result.None">
            <summary>
            The operation did not return any particular value. This value is the same as returning a <see langword="null"/> <see cref="T:WinCopies.Nullable`1"/>.
            </summary>
        </member>
        <member name="F:WinCopies.Result.False">
            <summary>
            The operation returned False. This value is the same number as <see langword="false"/>.
            </summary>
        </member>
        <member name="F:WinCopies.Result.True">
            <summary>
            The operation returned True. This value is the same number as <see langword="true"/>.
            </summary>
        </member>
        <member name="T:WinCopies.ThrowHelper">
            <summary>
            This class contains some helper methods for exception throwing.
            </summary>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetArgumentNullException(System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentNullException"/> for a given argument name.
            </summary>
            <param name="argumentName">The name of the <see langword="null"/> argument.</param>
            <returns>An <see cref="T:System.ArgumentNullException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.ThrowIfNull``1(``0@,System.String@)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if a given object is null.
            </summary>
            <typeparam name="T">The type of <paramref name="obj"/>. This must be a class type.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetOrThrowIfNull(System.Object@,System.String@)">
            <summary>
            Returns <paramref name="obj"/> if it is not null, otherwise throws the <see cref="T:System.ArgumentNullException"/> that is returned by the <see cref="M:WinCopies.ThrowHelper.GetArgumentNullException(System.String@)"/> method.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetOrThrowIfNull``1(``0@,System.String@)">
            <summary>
            Returns <paramref name="obj"/> if it is not null, otherwise throws the <see cref="T:System.ArgumentNullException"/> that is returned by the <see cref="M:WinCopies.ThrowHelper.GetArgumentNullException(System.String@)"/> method.
            </summary>
            <typeparam name="T">The type of <paramref name="obj"/>. This must be a class type.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentNullException"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetExceptionForInvalidType``1(System.String@,System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objTypeName">The type name of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetExceptionForInvalidType``1(System.Type@,System.String@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objType">The type of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetExceptionForInvalidType(System.String@,System.String@,System.Type@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objTypeName">The type name of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetExceptionForInvalidType(System.Type@,System.String@,System.Type@)">
            <summary>
            Returns an <see cref="T:System.ArgumentException"/> for the given object and argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="objType">The type of the object of the exception.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is returned.</param>
            <returns>An <see cref="T:System.ArgumentException"/> with the given argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.ThrowIfNotType``1(System.Object@,System.String@)">
            <summary>
            If <paramref name="obj"/> is not <typeparamref name="T"/>, throws the exception that is returned by the <see cref="M:WinCopies.ThrowHelper.GetExceptionForInvalidType``1(System.String@,System.String@)"/> method.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.ThrowHelper.ThrowIfNotTypeOrNull``1(System.Object@,System.String@)">
            <summary>
            If <paramref name="obj"/> is not <typeparamref name="T"/>, throws the exception that is returned by the <see cref="M:WinCopies.ThrowHelper.GetExceptionForInvalidType``1(System.String@,System.String@)"/> method.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.Exception"/> that is thrown.</param>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetOrThrowIfNotType``1(System.Object@,System.String@)">
            <summary>
            Returns a given object when it is an instance of a given type, otherwise throws an <see cref="T:System.ArgumentException"/> with a given argument name.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentException"/>.</param>
            <returns><paramref name="obj"/> when it is an instance of <typeparamref name="T"/>, otherwise throws an <see cref="T:System.ArgumentException"/> with <paramref name="argumentName"/> for the argument name.</returns>
        </member>
        <member name="M:WinCopies.ThrowHelper.GetOrThrowIfNotTypeOrNull``1(System.Object@,System.String@)">
            <summary>
            Returns a given object when it is an instance of a given type, otherwise throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="obj"/> is <see langword="null"/> or an <see cref="T:System.ArgumentException"/> with a given argument name otherwise.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The argument name for the <see cref="T:System.ArgumentException"/>.</param>
            <returns><paramref name="obj"/> when it is an instance of <typeparamref name="T"/>, otherwise throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="obj"/> is <see langword="null"/> or an <see cref="T:System.ArgumentException"/> with <paramref name="argumentName"/> for the argument name otherwise.</returns>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class with a specified
            error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this
            exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not a <see langword="null"/> reference, the current exception is raised in a catch
            block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class with a specified
            error message and the name of the parameter that causes this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class with a specified
            error message, the parameter name, and a reference to the inner exception that
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="paramName">The name of the parameter that caused the current exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/>
            parameter is not a <see langword="null"/> reference, the current exception is raised in a catch
            block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.TypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.TypeArgumentException"/> class with serialized
            data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:WinCopies.DeepClone`1">
            <summary>
            Provides a delegate to indicate to a method (e.g. a constructor) how to create a deep clone of an object or value. All Ids should be preserved, if any. See the Remarks section.
            </summary>
            <typeparam name="T">The type of the object to deep-clone.</typeparam>
            <param name="obj">The object or value to deep-clone. If this parameter is <see langword="null"/>, a new object is returned.</param>
            <returns>A deep clone of <paramref name="obj"/>.</returns>
            <remarks>This delegate can be used in constructors of classes or structures that implement the <see cref="T:WinCopies.IDeepCloneable"/> interface in order to pass an instance of this delegate to a parameter instead of passing directly an argument that needs reconstruction on a deep cloning operation.</remarks>
            <seealso cref="T:WinCopies.IDeepCloneable"/>
        </member>
        <member name="T:WinCopies.DeepCloneUsingIdsOptions`1">
            <summary>
            Provides a delegate to indicate to a method (e.g. a constructor) how to create a deep clone of an object or value. See the Remarks section.
            </summary>
            <typeparam name="T">The type of the object to deep-clone.</typeparam>
            <param name="preserveIds">A <see cref="T:System.Boolean"/> value that indicates whether to preserve IDs, if any.</param>
            <param name="obj">The object or value to deep-clone. If this parameter is <see langword="null"/>, a new object is returned.</param>
            <returns>A deep clone of <paramref name="obj"/>.</returns>
            <remarks>This delegate can be used in constructors of classes or structures that implement the <see cref="T:WinCopies.IDeepCloneable"/> interface in order to pass an instance of this delegate to a parameter instead of passing directly an argument that needs reconstruction on a deep cloning operation.</remarks>
            <seealso cref="T:WinCopies.IDeepCloneable"/>
        </member>
        <member name="T:WinCopies.IDeepCloneable">
            <summary>
            Represents an object or a value that can be deep cloned. Note that if <see cref="P:WinCopies.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/> is <see langword="true"/>, the result of the <see cref="M:WinCopies.IDeepCloneable.DeepClone"/> method might not be a complete deep-clone of the current object or value.
            </summary>
            <seealso cref="P:WinCopies.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/>
        </member>
        <member name="P:WinCopies.IDeepCloneable.NeedsObjectsOrValuesReconstruction">
            <summary>
            Gets a value that indicates whether the current object or value has to reconstruct objects or values on deep cloning. If the current object or value contains objects or values that all implement this interface, this property should be <see langword="true"/>, unless at least one of these objects or values contains itself one or more objects and/or values that does not implement this interface.
            </summary>
        </member>
        <member name="M:WinCopies.IDeepCloneable.DeepClone">
            <summary>
            Creates a deep clone of the current object or value.
            </summary>
            <returns>A deep clone of the current object or value.</returns>
        </member>
        <member name="T:WinCopies.IIDObjectDeepCloneable">
            <summary>
            Represents an object or a value that can be deep cloned. Note that if <see cref="P:WinCopies.IDeepCloneable.NeedsObjectsOrValuesReconstruction"/> is <see langword="true"/>, the result of the <see cref="M:WinCopies.IDeepCloneable.DeepClone"/> <see cref="M:WinCopies.IIDObjectDeepCloneable.DeepClone(System.Boolean)"/> methods might not be a complete deep-clone of the current object or value.
            </summary>
        </member>
        <member name="M:WinCopies.IIDObjectDeepCloneable.DeepClone(System.Boolean)">
            <summary>
            Creates a deep clone of the current object or value.
            </summary>
            <param name="preserveIds">Whether to preserve IDs, if any.</param>
            <returns>A deep clone of the current object or value.</returns>
        </member>
        <member name="T:WinCopies.ObjectDisposingException">
            <summary>
            The exception that is thrown when an operation is performed on a disposing object.
            </summary>
        </member>
        <member name="M:WinCopies.ObjectDisposingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.ObjectDisposingException"/> class with a string containing the name of the disposing object.
            </summary>
            <param name="objectName">A string containing the name of the disposing object.</param>
        </member>
        <member name="M:WinCopies.ObjectDisposingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.ObjectDisposingException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If <paramref name="innerException"/> is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:WinCopies.ObjectDisposingException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.ObjectDisposingException"/> class with the specified object name and message.
            </summary>
            <param name="objectName">The name of the disposed object.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:WinCopies.ObjectDisposingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.ObjectDisposingException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:WinCopies.ObjectDisposingException.Message">
            <summary>
            Gets the message that describes the error.
            </summary>
        </member>
        <member name="P:WinCopies.ObjectDisposingException.ObjectName">
            <summary>
            Gets the name of the disposed object.
            </summary>
        </member>
        <member name="M:WinCopies.ObjectDisposingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Retrieves the System.Runtime.Serialization.SerializationInfo object with the parameter name and additional exception information.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:WinCopies.UtilHelpers">
            <summary>
            Provides some static helper methods.
            </summary>
        </member>
        <member name="M:WinCopies.UtilHelpers.IncrementCircularly(System.Int32@,System.Int32@)">
            <summary>
            Increments <paramref name="index"/> circularly by one step. If <paramref name="index"/> is equal to <paramref name="maxLength"/> - 1, then it is reset to zero.
            </summary>
            <param name="index">The index to increment.</param>
            <param name="maxLength">The total length. If an overflow is about to occur, the given index is reset to zero.</param>
            <seealso cref="!:SetIndex(int, in int, ref int)"/>
            <seealso cref="M:WinCopies.UtilHelpers.IncrementCircularly2(System.Int32,System.Int32@)"/>
            <seealso cref="M:WinCopies.UtilHelpers.DecrementCircularly(System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.IncrementCircularly2(System.Int32,System.Int32@)">
            <summary>
            Increments <paramref name="index"/> circularly by one step. If <paramref name="index"/> is equal to <paramref name="maxLength"/> - 1, then it is reset to zero.
            </summary>
            <param name="index">The index to increment.</param>
            <param name="maxLength">The total length. If an overflow is about to occur, the given index is reset to zero.</param>
            <seealso cref="M:WinCopies.UtilHelpers.GetIndex(System.Int32,System.Int32@,System.Int32@)"/>
            <seealso cref="!:IncrementCircularly(int, in int)"/>
            <seealso cref="!:DecrementCircularly2(ref int, in int)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.DecrementCircularly(System.Int32@,System.Int32@)">
            <summary>
            Decrements <paramref name="index"/> circularly by one step. If <paramref name="index"/> is equal to zero, then it is set to <paramref name="maxLength"/> - 1.
            </summary>
            <param name="index">The index to decrement.</param>
            <param name="maxLength">The total length. If a negative value is about to be computed, the given index is set to the last possible value regarding the value of the current parameter.</param>
            <seealso cref="!:SetIndex(int, in int, ref int)"/>
            <seealso cref="M:WinCopies.UtilHelpers.DecrementCircularly2(System.Int32,System.Int32@)"/>
            <seealso cref="M:WinCopies.UtilHelpers.IncrementCircularly(System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.DecrementCircularly2(System.Int32,System.Int32@)">
            <summary>
            Decrements <paramref name="index"/> circularly by one step. If <paramref name="index"/> is equal to zero, then it is set to <paramref name="maxLength"/> - 1.
            </summary>
            <param name="index">The index to decrement.</param>
            <param name="maxLength">The total length. If a negative value is about to be computed, the given index is set to the last possible value regarding the value of the current parameter.</param>
            <seealso cref="!:DecrementCircularly(int, in int)"/>
            <seealso cref="!:IncrementCircularly2(ref int, in int)"/>
            <seealso cref="M:WinCopies.UtilHelpers.GetIndex(System.Int32,System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.SetIndex(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Increments <paramref name="start"/> by a number of steps provided by the value of <paramref name="offset"/>. The given index will remain between zero and a given length.
            </summary>
            <param name="start">The index to increment.</param>
            <param name="totalLength">The total length supported. An offset that would result to an overflow regarding the given index will be felt back to a corresponding offset that will not result to an overflow.</param>
            <param name="offset">The offset that represents the number of steps for the incrementation. This value can be any value supported by the <see cref="T:System.Int32"/> type. Negative values mean that this method will compute a decrementation. Overflow values will be felt back to a value between zero and the given length.</param>
            <seealso cref="M:WinCopies.UtilHelpers.GetIndex(System.Int32,System.Int32@,System.Int32@)"/>
            <seealso cref="M:WinCopies.UtilHelpers.IncrementCircularly(System.Int32@,System.Int32@)"/>
            <seealso cref="M:WinCopies.UtilHelpers.DecrementCircularly(System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.GetIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Increments <paramref name="start"/> by a number of steps provided by the value of <paramref name="offset"/>. The given index will remain between zero and a given length.
            </summary>
            <param name="start">The index to increment.</param>
            <param name="totalLength">The total length supported. An offset that would result to an overflow regarding the given index will be felt back to a corresponding offset that will not result to an overflow.</param>
            <param name="offset">The offset that represents the number of steps for the incrementation. This value can be any value supported by the <see cref="T:System.Int32"/> type. Negative values mean that this method will compute a decrementation. Overflow values will be felt back to a value between zero and the given length.</param>
            <seealso cref="M:WinCopies.UtilHelpers.SetIndex(System.Int32@,System.Int32@,System.Int32@)"/>
            <seealso cref="!:IncrementCircularly2(ref int, in int)"/>
            <seealso cref="!:DecrementCircularly2(ref int, in int)"/>
        </member>
        <member name="M:WinCopies.UtilHelpers.InitializeStruct``1(System.Nullable{``0}@,System.Func{``0}@)">
            <summary>
            Creates a new instance of a given type if <paramref name="value"/> is null and update <paramref name="value"/> with that value; then returns the value of <paramref name="value"/>.
            </summary>
            <typeparam name="T">The type from which to create a new value, if applicable, and of the value to return.</typeparam>
            <param name="value">The reference of the variable to read from and to write to the new value, if applicable.</param>
            <param name="func">The <see cref="T:System.Func`1"/> that provides a new value to assign to <paramref name="value"/>.</param>
            <returns>A new value from <typeparamref name="T"/> if <paramref name="value"/> is null; otherwise the value of <paramref name="value"/>.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.GetCommonPredicate">
            <summary>
            Provides a <see cref="T:WinCopies.Predicate"/> implementation that always returns <see langword="true"/>.
            </summary>
            <returns>Returns the <see langword="true"/> value.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.GetCommonPredicate``1">
            <summary>
            Provides a <see cref="T:System.Predicate`1"/> implementation that always returns <see langword="true"/>.
            </summary>
            <returns>Returns the <see langword="true"/> value.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.Concatenate``1(``0[][])">
            <summary>
            Concatenates multiple arrays from a same item type. Arrays must have only one dimension.
            </summary>
            <param name="arrays">The different arrays to concatenate.</param>
            <returns>An array with a copy of all values of the given arrays.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.IsNumber(System.Object@)">
            <summary>
            Checks if a object is a numeric value (an instance of a numeric value type).
            </summary>
            <remarks>This function makes a check for the object type. For a string-parsing-checking for numerical value, look at the <see cref="M:WinCopies.UtilHelpers.IsNumeric(System.String@,System.Decimal@)"/> function.</remarks>
            <param name="value">The object to check</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the object given is from a numerical type.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.IsNumeric(System.String@,System.Decimal@)">
            <summary>
            Checks if a <see cref="T:System.String"/> is a numerical value.
            </summary>
            <remarks>This function tries to parse a <see cref="T:System.String"/> value to a <see cref="T:System.Decimal"/> value. Given that <see cref="T:System.Decimal"/> type is the greatest numerical type in the .NET framework, all the numbers can be supported in the .NET framework can be set in a <see cref="T:System.Decimal"/> object.</remarks>
            <param name="s">The <see cref="T:System.String"/> to check</param>
            <param name="d">The <see cref="T:System.Decimal"/> in which one set the <see cref="T:System.Decimal"/> value</param>
            <returns>A <see cref="T:System.Boolean"/> value that indicates whether the <see cref="T:System.String"/> given is a <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.GetAllEnumFlags``1">
            <summary>
            Get all the flags in a flags enum.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <returns>All the flags in the given enum type.</returns>
        </member>
        <member name="M:WinCopies.UtilHelpers.GetNumValue``1(System.String@)">
            <summary>
            Gets the numeric value for a field in an enum.
            </summary>
            <param name="enumType">The enum type in which to look for the specified enum field value.</param>
            <param name="fieldName">The enum field to look for.</param>
            <returns>The numeric value corresponding to this enum, in the given enum type underlying type.</returns>
        </member>
        <member name="P:WinCopies.IReadOnlyValueObject.IsReadOnly">
            <summary>
            Gets a value that indicates whether this object is read-only.
            </summary>
        </member>
        <member name="P:WinCopies.IReadOnlyValueObject.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="T:WinCopies.IValueObject">
            <summary>
            Represents a value container. See the <see cref="T:WinCopies.IValueObject`1"/> for a generic version of this class.
            </summary>
        </member>
        <member name="T:WinCopies.IValueObject`1">
            <summary>
            Represents a value container. See the <see cref="T:WinCopies.IValueObject"/> for a non-generic version of this class.
            </summary>
        </member>
        <member name="P:WinCopies.IValueObject`1.Value">
            <summary>
            Gets or sets the value of the object.
            </summary>
        </member>
        <member name="P:WinCopies.INamedObjectBase.Name">
            <summary>
            Gets or sets the name of this object.
            </summary>
        </member>
        <member name="P:WinCopies.INamedObjectBase2.Name">
            <summary>
            Gets or sets the name of this object.
            </summary>
        </member>
        <member name="T:WinCopies.INamedObject">
            <summary>
            Provides an object that defines a value with an associated name and notifies of the name or value change.
            </summary>
        </member>
        <member name="T:WinCopies.INamedObject`1">
            <summary>
            Provides an object that defines a value with an associated name and notifies of the name or value change.
            </summary>
        </member>
        <member name="T:WinCopies.ICheckableObject">
            <summary>
            Provides an object that defines a value that can be checked and notifies of the checked status or value change. For example, this interface can be used in a view for items that can be selected.
            </summary>
        </member>
        <member name="P:WinCopies.ICheckableObject.IsChecked">
            <summary>
            Gets or sets a value that indicates whether this object is checked.
            </summary>
        </member>
        <member name="P:WinCopies.CheckableObject.IsChecked">
            <inheritdoc/>
        </member>
        <member name="P:WinCopies.CheckableObject2.IsChecked">
            <inheritdoc/>
        </member>
        <member name="T:WinCopies.CheckableNamedObject">
            <summary>
            Provides an object that defines a value that can be checked and notifies of the checked status or value change. For example, this class can be used in a view for items that can be selected.
            </summary>
        </member>
        <member name="P:WinCopies.CheckableNamedObject.Name">
            <inheritdoc/>
        </member>
        <member name="M:WinCopies.CheckableNamedObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.CheckableObject"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.CheckableNamedObject.#ctor(System.Boolean@,System.String@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.CheckableObject"/> class using custom values.
            </summary>
            <param name="isChecked">A value that indicates if this object is checked by default.</param>
            <param name="name">The name of the object.</param>
        </member>
        <member name="T:WinCopies.CheckableNamedObject2">
            <summary>
            Provides an object that defines a value that can be checked and notifies of the checked status or value change. For example, this class can be used in a view for items that can be selected.
            </summary>
        </member>
        <member name="P:WinCopies.CheckableNamedObject2.Name">
            <inheritdoc/>
        </member>
        <member name="M:WinCopies.CheckableNamedObject2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.CheckableObject"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.CheckableNamedObject2.#ctor(System.Nullable{System.Boolean}@,System.String@)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.CheckableObject"/> class using custom values.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="T:WinCopies.ValueObjectEqualityComparer">
            <summary>
            Represents a default comparer for <see cref="T:WinCopies.IReadOnlyValueObject"/>s.
            </summary>
        </member>
        <member name="M:WinCopies.ValueObjectEqualityComparer.Equals(WinCopies.IReadOnlyValueObject,WinCopies.IReadOnlyValueObject)">
            <summary>
            Checks if two <see cref="T:WinCopies.IReadOnlyValueObject"/>s are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.ValueObjectEqualityComparer.GetHashCode(WinCopies.IReadOnlyValueObject)">
            <summary>
            Returns the hash code for a given <see cref="T:WinCopies.IReadOnlyValueObject"/>. If <paramref name="obj"/> has a value, this function returns the hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.IReadOnlyValueObject.Value"/>, otherwise this function returns the hash code of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.IReadOnlyValueObject"/> for which to return the hash code.</param>
            <returns>The hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.IReadOnlyValueObject.Value"/> if <paramref name="obj"/> has a value, otherwise the <paramref name="obj"/>'s hash code.</returns>
        </member>
        <member name="T:WinCopies.ValueObjectEqualityComparer`1">
            <summary>
            Represents a default comparer for <see cref="T:WinCopies.IReadOnlyValueObject`1"/>s.
            </summary>
        </member>
        <member name="M:WinCopies.ValueObjectEqualityComparer`1.Equals(WinCopies.IReadOnlyValueObject{`0},WinCopies.IReadOnlyValueObject{`0})">
            <summary>
            Checks if two <see cref="T:WinCopies.IReadOnlyValueObject`1"/>s are equal.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if <paramref name="x"/> and <paramref name="y"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:WinCopies.ValueObjectEqualityComparer`1.GetHashCode(WinCopies.IReadOnlyValueObject{`0})">
            <summary>
            Returns the hash code for a given <see cref="T:WinCopies.IReadOnlyValueObject`1"/>. If <paramref name="obj"/> has a value, this function returns the hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.IReadOnlyValueObject`1.Value"/>, otherwise this function returns the hash code of <paramref name="obj"/>.
            </summary>
            <param name="obj">The <see cref="T:WinCopies.IReadOnlyValueObject`1"/> for which to return the hash code.</param>
            <returns>The hash code of <paramref name="obj"/>'s <see cref="P:WinCopies.IReadOnlyValueObject`1.Value"/> if <paramref name="obj"/> has a value, otherwise the <paramref name="obj"/>'s hash code.</returns>
        </member>
    </members>
</doc>
